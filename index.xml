<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>&lt;span class=&#39;site-name&#39;&gt;Social Science Sofa | &lt;/span&gt; &lt;span class=&#39;logo-text&#39;&gt;[___]&lt;/span&gt;</title>
<link>https://thesocialsciencesofa.com/</link>
<atom:link href="https://thesocialsciencesofa.com/index.xml" rel="self" type="application/rss+xml"/>
<description>The Social Science Sofa is your cosy corner for data visualisation, R programming, and research insights—where complex ideas recline into clarity.</description>
<generator>quarto-1.4.549</generator>
<lastBuildDate>Sun, 13 Jul 2025 23:00:00 GMT</lastBuildDate>
<item>
  <title>The Secret Weapon Every Researcher Could Harness</title>
  <dc:creator>Daniel Dauber</dc:creator>
  <link>https://thesocialsciencesofa.com/blog/2025-07-14/why-learn-r-programming.html</link>
  <description><![CDATA[ 
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin="">
<link href="https://fonts.googleapis.com/css2?family=Fira+Code:wght@300..700&amp;family=Fredoka:wght@300..700&amp;family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&amp;family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&amp;family=Quicksand:wght@300..700&amp;family=Source+Code+Pro:ital,wght@0,200..900;1,200..900&amp;display=swap" rel="stylesheet">

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.13.1/font/bootstrap-icons.min.css">





<div class="slide-in">
<p><img src="https://thesocialsciencesofa.com/blog/2025-07-14/why-learn-r-programming.jpg" alt="Showing a person sitting at their desk with a pencil in their hand creating a table on a piece of paper. The monitor next to them has some code on the screen in a stylised way." width="100%"></p>
</div>
<p>You’re knee-deep in your latest research project, wrestling with data that refuses to behave, when a colleague mentions they’ve just automated their entire analysis pipeline and created interactive visualisations that would make <em>The Economist</em> jealous. Meanwhile, you’re still clicking through your favourite statistics software menus wondering if there’s a better way.</p>
<p>There is. And it’s probably not what you think.</p>
<p>The secret weapon isn’t a fancy new statistical method or expensive software. It’s learning to speak the language of computers, specifically, learning a programming language like R. Before you roll your eyes and mutter “I’m a researcher, not a programmer,” hear me out.</p>
<section id="the-uncomfortable-truth-about-modern-research" class="level2">
<h2 class="anchored" data-anchor-id="the-uncomfortable-truth-about-modern-research">The Uncomfortable Truth About Modern Research</h2>
<p>Let’s be honest, the research landscape is changing faster than a politician’s promises. New analytical methods emerge monthly, data sets grow larger and more complex, and the pressure to produce reproducible, transparent research has never been higher.</p>
<p>Yet many of us are still using the same tools we learned in graduate school, clicking through the same menu systems, and wondering why our research feels… limited.</p>
<p>Don’t get me wrong. There’s nothing inherently wrong with traditional statistical software. SPSS, and its cousins have served researchers well for decades. But here’s the thing: they’re like driving a reliable family saloon when you could be piloting a sports car.</p>
</section>
<section id="why-most-researchers-avoid-programming-and-why-theyre-wrong" class="level2">
<h2 class="anchored" data-anchor-id="why-most-researchers-avoid-programming-and-why-theyre-wrong">Why Most Researchers Avoid Programming (And Why They’re Wrong)</h2>
<p>The resistance is understandable. Learning a programming language feels like learning Ancient Greek when you just want to analyse your survey data. It’s intimidating, time-consuming, and frankly, most of us didn’t sign up for a computer science degree.</p>
<p>But here’s what nobody tells you: <strong>you don’t need to become a programmer to benefit from programming.</strong></p>
<p>Think of it like learning to drive. You don’t need to understand internal combustion engines to get from point A to point B. Similarly, you don’t need to become the next coding wizard to dramatically improve your research capabilities.</p>
</section>
<section id="the-hidden-benefits-nobody-mentions" class="level2">
<h2 class="anchored" data-anchor-id="the-hidden-benefits-nobody-mentions">The Hidden Benefits Nobody Mentions</h2>
<p>In short, there are 5 main benefits (and probably some more that just won’t come to my mind right now), that could make you a more productive, and maybe even better, researcher.</p>
<section id="your-analytical-toolbox-becomes-infinite" class="level3">
<h3 class="anchored" data-anchor-id="your-analytical-toolbox-becomes-infinite">1. Your Analytical Toolbox Becomes Infinite</h3>
<p>Traditional software is like shopping at a small corner shop – you get the basics, but selection is often limited. Programming languages like R are like having access to the world’s largest free supermarket.</p>
<p>Need to run a cutting-edge machine learning algorithm published last week? There’s probably an R package for that. Want to try a new visualisation technique you saw in <em>Nature</em>? Someone’s likely coded it up and shared it freely.</p>
<p>The R ecosystem contains over 38,000 packages on CRAN alone (at the time of writing this blog), covering everything from social network analysis to text mining to geospatial statistics. It’s like having thousands of statistical consultants working for you, for free, 24/7.</p>
<div class="cell slide-in">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repos =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">CRAN =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://cran.r-project.org"</span>))</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">available.packages</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 380664</code></pre>
</div>
</div>
<p>Let me share a story from when I was still beginning to learn R:</p>
<p>I once attended a brilliant guest talk where the researchers had downloaded and coded over 200 tweets for a content analysis study. It was meticulous, careful work and the findings were genuinely impressive. However, when I asked how they scraped and cleaned the Twitter (now X) data, their response was: “Oh, we just did it manually.”</p>
<p>I was stunned. That must have taken weeks. At the time, I had just learned how to pull down over half a million tweets for a separate project with a few lines of code.</p>
<p>I wasn’t smarter. I just had a better toolbox. Programming didn’t just save me time, but it let me focus on the fun part: analysing the data and making sense of it.</p>
</section>
<section id="it-rewires-your-brain-in-a-good-way" class="level3">
<h3 class="anchored" data-anchor-id="it-rewires-your-brain-in-a-good-way">2. It Rewires Your Brain (In a Good Way)</h3>
<p>Here’s something they don’t teach in methodology courses: programming fundamentally changes how you think about problems.</p>
<p>Programming languages are ruthlessly logical. Write unclear code, and your computer will politely refuse to cooperate. This forces you to break complex problems into smaller, manageable pieces, which is a skill that transfers beautifully to research design.</p>
<p>I’ve noticed this with my own students. Those who learn programming often become better at:</p>
<ul>
<li><strong>Conceptual thinking</strong>: Breaking complex theories into testable components</li>
<li><strong>Abstract reasoning</strong>: Moving from specific observations to general principles</li>
<li><strong>Problem decomposition</strong>: Tackling large research questions systematically</li>
</ul>
<p>It’s like cross-training for your brain. You come for the data analysis, but you leave with enhanced cognitive abilities.</p>
</section>
<section id="you-see-patterns-others-miss" class="level3">
<h3 class="anchored" data-anchor-id="you-see-patterns-others-miss">3. You See Patterns Others Miss</h3>
<p>When you’re not limited by pre-built menu options, you start exploring your data differently. You ask questions that wouldn’t occur to you in traditional software because the tools to answer them are suddenly available.</p>
<p>For example, one of my former PhD students was cleaning their survey data in R and inpsected missing data using the handy <code>naniar</code> package. This package is specialised in exploring patterns of missing data visually and computationally with often just one line of code. By plotting missing data and sorting all observations based on their missing data, my PhD student found that significant jumps in missing data coincided with page breaks in the survey, i.e.&nbsp;every time a participant was asked to continue to the next page, some participants simply stopped completing the questionnaire.</p>
<div class="slide-in">
<p><img src="https://thesocialsciencesofa.com/blog/2025-07-14/missing_data_pattern.jpg" alt="Plot of missing data showing a incremental increases in missing data at each page break of the questionnaire." width="100%"></p>
</div>
<p>Traditional software would never have prompted them to look at this, because data cleaning often happens outside the analytical software and most of the time not visually. However, with programming tools and R packages that visualise patterns quickly and easily, it became a natural extension of the analysis. Those response patterns ended up affecting how my student treated missing data and ended up with a much more robust analysis because of it.</p>
</section>
<section id="your-research-becomes-bulletproof" class="level3">
<h3 class="anchored" data-anchor-id="your-research-becomes-bulletproof">4. Your Research Becomes Bulletproof</h3>
<p>Reproducibility crisis, anyone? When your entire analysis exists as code, reproducing your results becomes trivial. No more “I think I clicked this menu option, but I can’t remember which settings I used.”</p>
<p>Every step of your analysis is documented, shareable, and verifiable. Your future self (and your collaborators) will thank you when you need to revisit the analysis six months later. However, do not think that only applies to R programming. Back in the days I created SPSS scripts to keep track of everything and rerun analysis with updated datasets as necessary. This was a huge help and if you enjoy working with SPSS you should definitely look into this (if you haven’t already).</p>
</section>
<section id="the-compound-interest-effect" class="level3">
<h3 class="anchored" data-anchor-id="the-compound-interest-effect">5. The Compound Interest Effect</h3>
<p>Here’s the kicker: once you learn one programming language, learning others becomes exponentially easier. The core concepts like variables, functions, loops, data structures, etc., are universal.</p>
<p>If you asked me, maybe start with R for statistics, then maybe Python for machine learning, JavaScript for web-based visualisations, or SQL for database management. Each new language builds on the foundation of the previous ones and you can do even more things.</p>
<p>It’s like learning Roman languages. Once you understand Latin roots, Italian, Spanish, and French become much more accessible.</p>
</section>
</section>
<section id="but-what-about-the-learning-curve" class="level2">
<h2 class="anchored" data-anchor-id="but-what-about-the-learning-curve">But What About the Learning Curve?</h2>
<p>Let’s address the elephant in the room: learning programming takes time and effort. There’s no sugar-coating this.</p>
<p>But here’s the perspective shift that helped me: <strong>you’re not learning programming for programming’s sake. You’re learning it to become a better researcher.</strong>. Having skills others might not have also gives you the opportunity to work on more projects where your programming expertise is highly valued - even beyond your own discipline.</p>
<p>Every hour you invest in learning R is an hour that will pay dividends across every future project. It’s not overhead. It’s infrastructure.</p>
<p>And honestly? The learning curve isn’t as steep as you think, not the least because there are so many learning materials and communities out there. You don’t need to master every aspect of a programming language to benefit from it. Learning enough R to clean data, run basic analyses, and create visualisations might take a few focused weeks. Learning enough to revolutionise your research might take a few months. After a year of using programming languages for your research you might never look back and only wonder: What else can I do now?</p>
<p>Compare that to the time you’d spend manually manipulating data in spreadsheets over the course of your career, and the investment becomes a no-brainer. It was for me.</p>
</section>
<section id="the-social-science-resistance" class="level2">
<h2 class="anchored" data-anchor-id="the-social-science-resistance">The Social Science Resistance</h2>
<p>Programming languages remain surprisingly uncommon in many social science fields, although they do gain momentum. While our colleagues in psychology and economics have largely embraced R and Python, other disciplines lag behind.</p>
<p>This presents an opportunity. Being one of the first in your field to adopt these tools can give you a significant competitive advantage. You’ll be able to: - Tackle research questions others can’t - Analyse data types others avoid - Produce more compelling visualisations - Collaborate more easily with interdisciplinary teams</p>
</section>
<section id="starting-your-journey-practical-steps" class="level2">
<h2 class="anchored" data-anchor-id="starting-your-journey-practical-steps">Starting Your Journey: Practical Steps</h2>
<p>If I’ve convinced you to take the plunge, here’s how to begin:</p>
<p><strong>1. Choose Your First Language Wisely</strong> For social science researchers, R is typically the best starting point. It’s designed for statistics, has a huge and wonderfully inclusive community, and excels at the tasks you’ll do most often.</p>
<p><strong>2. Embrace the Beginner’s Mindset</strong> You will feel stupid at first. Your code will break. You’ll spend hours debugging what turns out to be a missing comma. This is normal and temporary. And hey, have you heard of ChatGPT? It can help with debugging your code.</p>
<p><strong>3. Start Small, Think Big</strong> Begin with simple tasks you already do. Import a dataset. Calculate some descriptive statistics. Create a basic plot. Build confidence before attempting anything fancy.</p>
<p><strong>4. Join the Community</strong> The R community is remarkably welcoming. Follow #RStats on X, join R User Groups like <a href="https://community.rstudio.com">RStudio Community</a>, <a href="https://www.tidytuesday.com">TidyTuesday</a> and <a href="https://rladies.org">R-Ladies</a>, and participate in other online forums dedicated to R. Programming isn’t a solitary activity – it’s deeply social.</p>
<p><strong>5. Focus on Your Research</strong> Don’t get caught up in becoming a “real programmer”. Learn what you need to advance your research, then learn more when you need it. One day you look back at all the projects you completed using programming languages and find that you actually have become a “real programmer” - whatever that means to you.</p>
</section>
<section id="the-bottom-line" class="level2">
<h2 class="anchored" data-anchor-id="the-bottom-line">The Bottom Line</h2>
<p>Learning a programming language won’t make you a computer scientist, but it will make you a more capable, creative, and confident researcher.</p>
<p>In an era where data is everywhere and analytical methods evolve rapidly, the ability to adapt your tools to your questions (rather than adapting your questions to your tools) is invaluable.</p>
<p>The researchers who thrive in the coming decades won’t necessarily be those with the most domain expertise but those who can combine domain expertise with computational thinking.</p>
<p>Your future research self is waiting. The only question is: are you ready to meet them?</p>
<hr>
<p><strong>Ready to start your programming journey?</strong></p>
<p>Check out <a href="https://r4np.com">R for Non-Programmers</a> for a gentle introduction designed specifically for researchers who want to harness the power of programming without the computer science degree.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>research methods</category>
  <category>programming</category>
  <category>social sciences</category>
  <guid>https://thesocialsciencesofa.com/blog/2025-07-14/why-learn-r-programming.html</guid>
  <pubDate>Sun, 13 Jul 2025 23:00:00 GMT</pubDate>
  <media:content url="https://thesocialsciencesofa.com/blog/2025-07-14/why-learn-r-programming.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Beyond the Splash Screen: Customising Your RStudio Startup Experience</title>
  <dc:creator>Daniel Dauber</dc:creator>
  <link>https://thesocialsciencesofa.com/blog/2025-07-07/rprofile_customisation.html</link>
  <description><![CDATA[ 
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin="">
<link href="https://fonts.googleapis.com/css2?family=Fira+Code:wght@300..700&amp;family=Fredoka:wght@300..700&amp;family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&amp;family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&amp;family=Quicksand:wght@300..700&amp;family=Source+Code+Pro:ital,wght@0,200..900;1,200..900&amp;display=swap" rel="stylesheet">

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.13.1/font/bootstrap-icons.min.css">





<div class="slide-in">
<p><img src="https://thesocialsciencesofa.com/blog/2025-07-07/custom_rprofile.jpg" alt="RStudio Console showing ASCII art that says: I am your teacher" width="100%"></p>
</div>
<p>Picture this: It is 9 am on a Monday morning. You are clutching your third cup of coffee, staring at your screen with the grim determination of someone about to wrangle a particularly unruly dataset. You double-click RStudio, and… <em>yawn</em>… the same old splash screen appears. Again. For the 1,247th time this year.</p>
<p>What if I told you that startup moment could be transformed from mundane to magical? What if, instead of that generic loading screen, you could be greeted by ASCII art masterpieces, live weather updates, or daily doses of inspiration? What if your R session could start with the digital equivalent of a warm hug and a gentle “you’ve got this” whisper?</p>
<p>Today, we are diving deep into the wonderful world of <code>.Rprofile</code> customisation – a journey that will not make you a better analyst (sorry!), but will absolutely make your daily R experience more delightful. And let us be honest, in a world where we spend half our lives debugging code or trying to understand why our regressions do not approve of our hypotheses, we need all the delight we can get.</p>
<section id="the-quick-start-guide-for-those-with-little-time" class="level2">
<h2 class="anchored" data-anchor-id="the-quick-start-guide-for-those-with-little-time">The Quick Start Guide for Those With Little Time</h2>
<p>Before we embark on this grand adventure, let us get you up and running with something simple and quick. Here is how to get started in less than two minutes:</p>
<section id="step-1-find-your-.rprofile" class="level3">
<h3 class="anchored" data-anchor-id="step-1-find-your-.rprofile">Step 1: Find Your .Rprofile</h3>
<p>The <code>.Rprofile</code> file is like your home’s welcome mat, but for R. It lives in your home directory and is invisible by default (hence the mysterious dot).</p>
<p>In RStudio, run this command to open your <code>.Rprofile</code>:</p>
<div class="cell slide-in">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edit_r_profile</span>()</span></code></pre></div>
</div>
</section>
<section id="step-2-add-your-first-customisation" class="level3">
<h3 class="anchored" data-anchor-id="step-2-add-your-first-customisation">Step 2: Add Your First customisation</h3>
<p>Copy and paste this magical incantation into your <code>.Rprofile</code>:</p>
<div class="cell slide-in">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The secret sauce for RStudio customisation</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setHook</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rstudio.sessionInit"</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(newSession) {</span>
<span id="cb2-3">  </span>
<span id="cb2-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Clear the console for a fresh start</span></span>
<span id="cb2-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\014</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-6">  </span>
<span id="cb2-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Your first personalised message</span></span>
<span id="cb2-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Welcome back, data wizard! ✨"</span>)</span>
<span id="cb2-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Today's forecast: 100% chance of insights!"</span>)</span>
<span id="cb2-10">  },</span>
<span id="cb2-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">action =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"append"</span>)</span></code></pre></div>
</div>
</section>
<section id="step-3-restart-and-marvel" class="level3">
<h3 class="anchored" data-anchor-id="step-3-restart-and-marvel">Step 3: Restart and Marvel</h3>
<p>Save the file, restart RStudio, and watch the magic happen. You have just taken your first step into a larger world of customisation possibilities. If all you want is a custom message, this does the trick. If you want something more intriguing and exciting, then read on.</p>
<p><strong>The Technical Bit</strong>: Everything that follows in this post should go between those curly braces where you see the messages. The <code>setHook("rstudio.sessionInit", ...) {...}</code> wrapper is the key that makes everything work in RStudio. It is like telling RStudio “hey, run this code every time you start up.” I will show you the inner code for clarity, but remember to wrap it in the <code>setHook()</code> structure. In short: You always start from this template:</p>
<div class="cell slide-in">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setHook</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rstudio.sessionInit"</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(newSession) {</span>
<span id="cb3-2">  </span>
<span id="cb3-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Put your custom .Rprofile code chunk here</span></span>
<span id="cb3-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to customise your startup experience of RStudio.</span></span>
<span id="cb3-5"></span>
<span id="cb3-6">    },</span>
<span id="cb3-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">action =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"append"</span>)</span></code></pre></div>
</div>
</section>
</section>
<section id="understanding-the-.rprofile-document" class="level2">
<h2 class="anchored" data-anchor-id="understanding-the-.rprofile-document">Understanding the <code>.Rprofile</code> document</h2>
<p>Think of <code>.Rprofile</code> as your personal R butler – the kind that remembers exactly how you like your workspace arranged and greets you with a knowing nod every morning. This file contains R code that runs automatically when R starts, allowing you to set up your digital domain exactly how you like it.</p>
<p>But here is where it gets interesting: regular <code>.Rprofile</code> tricks work fine in base R, but RStudio is a different beast entirely. The <code>setHook()</code> function is your secret weapon for RStudio customisation. It is like having a backstage pass to RStudio’s startup sequence.</p>
<p>The beauty of this approach is that it is completely non-destructive. If you mess something up, just delete the problematic code and restart. No harm, no foul, no need to reinstall anything.</p>
<p>Let us look at some customisation options that might fit your bill.</p>
</section>
<section id="the-minimalists-approach-simple-clean-and-fast" class="level2">
<h2 class="anchored" data-anchor-id="the-minimalists-approach-simple-clean-and-fast">The Minimalist’s Approach: Simple, clean and fast</h2>
<p>Let us begin with the zen of startup customisation. Sometimes, the most powerful thing you can do is…nothing. Well, almost nothing.</p>
<div class="cell slide-in">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The art of digital minimalism</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\014</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
<p>This single line clears your console, giving you a pristine workspace to begin your analytical adventures. It might seem trivial – after all, it is just one keystroke saved. However, there is something deeply satisfying about starting with a clean slate.</p>
<p>I assume that this saves me approximately 0.5 seconds per RStudio session. Assuming I only restart an R Session once each day (very unlikely), over a year, that is roughly 3 minutes of my life back. Will this 3 minutes change the world? Probably not. Will it give me a tiny hit of dopamine every morning? Absolutely.</p>
<p>But more importantly, it is a statement. It says, “I care about my digital environment enough to make it exactly how I want it.” And that, my friend, is the first step toward true customisation mastery.</p>
</section>
<section id="the-art-of-digital-hospitality-crafting-your-welcome-message" class="level2">
<h2 class="anchored" data-anchor-id="the-art-of-digital-hospitality-crafting-your-welcome-message">The Art of Digital Hospitality: Crafting Your Welcome Message</h2>
<p>Now that you have mastered the zen of console clearing, let us add some personality to your startup routine. Custom messages are where the real fun begins – it is like having a conversation with your computer, except your computer actually says something encouraging for once. The below code is what I use for several years now. A bit boring for some, but plenty for me.</p>
<div class="cell slide-in">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Clear the console</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\014</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display a welcome message</span></span>
<span id="cb5-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Here we go again! 👨‍💻"</span>)</span></code></pre></div>
</div>
<div class="slide-in">
<p><img src="https://thesocialsciencesofa.com/blog/2025-07-07/01_rprofile_welcome_message.jpg" alt="Console Output showing the message: Here we go again! It also show an emoji of a person behind a laptop." width="100%"></p>
</div>
<p>The <code>message()</code> function is perfect for this because it is specifically designed for informational output. Unlike <code>print()</code> or <code>cat()</code>, it has a certain gravitas – it is the difference between whispering and speaking with conviction.</p>
<p>But why stop at generic encouragement? This is your chance to inject some personality into your R sessions. Maybe you are the type who needs a gentle reminder that correlation does not imply causation. Perhaps you are working on a specific project and need daily motivation to finish that analysis. Or maybe you just want to remind yourself that you are awesome at what you do.</p>
<p>The key is making it personal. After all, you are the only one who will see this message (and maybe your students/colleagues), so make it count.</p>
</section>
<section id="the-canvas-of-code-ascii-art-adventures" class="level2">
<h2 class="anchored" data-anchor-id="the-canvas-of-code-ascii-art-adventures">The Canvas of Code: ASCII Art Adventures</h2>
<p>Here is where we throw caution to the wind and embrace our inner artist. ASCII art might seem frivolous, but there is something wonderfully subversive about turning your serious data analysis environment into a canvas for creative expression.</p>
<p>Let us start with something appropriately R-themed:</p>
<div class="cell slide-in">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\014</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ASCII art R logo</span></span>
<span id="cb6-4">r_logo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb6-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  ██████╗</span></span>
<span id="cb6-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  ██╔══██╗</span></span>
<span id="cb6-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  ██████╔╝</span></span>
<span id="cb6-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  ██╔══██╗</span></span>
<span id="cb6-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  ██║  ██║</span></span>
<span id="cb6-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  ╚═╝  ╚═╝</span></span>
<span id="cb6-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb6-12"></span>
<span id="cb6-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(r_logo)</span>
<span id="cb6-14"></span>
<span id="cb6-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Welcome to the R universe! 🚀"</span>)</span>
<span id="cb6-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time to wrangle some data!"</span>)</span></code></pre></div>
</div>
<div class="slide-in">
<p><img src="https://thesocialsciencesofa.com/blog/2025-07-07/02_rprofile_ascii_art_r.jpg" alt="Console Output showing the R logo as ASCII art." width="100%"></p>
</div>
<p>The <code>cat()</code> function is your ASCII art best friend because it prints text exactly as you have formatted it. No automatic line breaks, no unwanted spacing – just pure, unadulterated artistic expression.</p>
<p>But why stop at simple logos when you can create entire startup experiences? For those brave enough to venture into the realm of epic ASCII art, here is something that will make your colleagues either deeply impressed or deeply concerned about your priorities.</p>
<div class="cell slide-in">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\014</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ASCII art Star Wars inspired message</span></span>
<span id="cb7-4">message_art <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb7-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> __</span></span>
<span id="cb7-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">|  |</span></span>
<span id="cb7-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">|  |</span></span>
<span id="cb7-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">|  |</span></span>
<span id="cb7-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">|  |</span></span>
<span id="cb7-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">|__|</span></span>
<span id="cb7-11"></span>
<span id="cb7-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     ___      .___  ___.</span></span>
<span id="cb7-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    /   </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     |   </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/   |</span></span>
<span id="cb7-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   /  ^  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    |  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  /  |</span></span>
<span id="cb7-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  /  /_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   |  |</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/|  |</span></span>
<span id="cb7-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> /  _____  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  |  |  |  |</span></span>
<span id="cb7-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/__/     </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> |__|  |__|</span></span>
<span id="cb7-18"></span>
<span id="cb7-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">____    ____  ______    __    __  .______</span></span>
<span id="cb7-20"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  /   / /  __  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  |  |  |  | |   _  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span></span>
<span id="cb7-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/   / |  |  |  | |  |  |  | |  |_)  |</span></span>
<span id="cb7-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">_    _/  |  |  |  | |  |  |  | |      /</span></span>
<span id="cb7-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    |  |    |  `--'  | |  `--'  | |  |</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">----.</span></span>
<span id="cb7-24"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    |__|     </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">______/   </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">______/  | _| `._____|</span></span>
<span id="cb7-25"></span>
<span id="cb7-26"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.___________. _______     ___       ______  __    __   _______ .______</span></span>
<span id="cb7-27"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">|           ||   ____|   /   </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     /      ||  |  |  | |   ____||   _  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span></span>
<span id="cb7-28"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`---|  |----`|  |__     /  ^  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   |  ,----'|  |__|  | |  |__   |  |_)  |</span></span>
<span id="cb7-29"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    |  |     |   __|   /  /_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  |  |     |   __   | |   __|  |      /</span></span>
<span id="cb7-30"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    |  |     |  |____ /  _____  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> |  `----.|  |  |  | |  |____ |  |</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">----.</span></span>
<span id="cb7-31"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    |__|     |_______/__/     </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">______||__|  |__| |_______|| _| `._____|</span></span>
<span id="cb7-32"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb7-33"></span>
<span id="cb7-34"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(message_art)</span>
<span id="cb7-35"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   Welcome to the dark side! </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
<div class="slide-in">
<p><img src="https://thesocialsciencesofa.com/blog/2025-07-07/03_rprofile_ascii_art_i_am_your_teacher.jpg" alt="Console Output showing ASCII art that says: I am your teacher." width="100%"></p>
</div>
<p>I created this using <a href="https://www.asciiart.eu/text-to-ascii-art">ASCII Art Generator</a>, which is an absolutely fantastic rabbit hole to fall down when you should be working.</p>
</section>
<section id="the-information-station-building-your-personal-dashboard" class="level2">
<h2 class="anchored" data-anchor-id="the-information-station-building-your-personal-dashboard">The Information Station: Building Your Personal Dashboard</h2>
<p>Let us shift gears from artistic to informational. What if your startup screen could give you a quick overview of your current R environment? Think of it as your personal mission control – a heads-up display for your analytical adventures.</p>
<div class="cell slide-in">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\014</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># System information</span></span>
<span id="cb8-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb8-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  🖥️ SYSTEM STATUS REPORT"</span>)</span>
<span id="cb8-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb8-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb8-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  📅 Date: "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.Date</span>())</span>
<span id="cb8-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  ⏰ Time: "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%H:%M:%S"</span>))</span>
<span id="cb8-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb8-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"╭────────────────────────────────────────────╮"</span>)</span>
<span id="cb8-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb8-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  🔧 R Version: "</span>, R.version.string)</span>
<span id="cb8-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  💻 Platform: "</span>, R.version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>platform)</span>
<span id="cb8-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb8-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  ──────────────────────────────────────────"</span>)</span>
<span id="cb8-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb8-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  📁 Working Directory: "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">basename</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>()))</span>
<span id="cb8-19"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  📦 Attached Packages: "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^package:"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">search</span>())))</span>
<span id="cb8-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb8-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"╰────────────────────────────────────────────╯"</span>)</span>
<span id="cb8-22"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb8-23"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb8-24"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  Ready for data analysis! 🎯"</span>)</span></code></pre></div>
</div>
<div class="slide-in">
<p><img src="https://thesocialsciencesofa.com/blog/2025-07-07/04_rprofile_system_info_01.jpg" alt="Console Output showing system information." width="100%"></p>
</div>
<p>This creates a neat little status report that tells you everything you need to know about your current R environment. The <code>R.version.string</code> gives you your R version, <code>R.version$platform</code> tells you what system you are running on, and <code>basename(getwd())</code> shows just the name of your current working directory without the full path (because nobody needs to see <code>/Users/YourName/Documents/Projects/That_Analysis_You_Started_Six_Months_Ago_But_Never_Finished</code>).</p>
<p>The <code>sum(grepl("^package:", search()))</code> is a neat little trick to count attached packages. The <code>search()</code> function lists all kinds of objects, including loaded packages. Therefore, we have to make sure we only count objects that relate to loaded packages. The <code>grepl()</code> function is an important one to remember if you work with character vectors frequently. It allows us to look for patterns in text, in our case this is <code>package:</code>. Learning how to use <code>grepl()</code> is certainly an essential skill everyone should tackle at some point in their R journey.</p>
<p>Here is an example of the unfiltered <code>search()</code> output:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">search</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] ".GlobalEnv"        "package:stats"     "package:graphics" 
[4] "package:grDevices" "package:utils"     "package:datasets" 
[7] "package:methods"   "Autoloads"         "package:base"     </code></pre>
</div>
</div>
</section>
<section id="the-technicolor-dream-adding-color-to-your-console" class="level2">
<h2 class="anchored" data-anchor-id="the-technicolor-dream-adding-color-to-your-console">The Technicolor Dream: Adding Color to Your Console</h2>
<p>Our status report is functional, but let us be honest, it is about as exciting as watching paint dry in grayscale. Time to add some color to our console world using the magnificent <code>crayon</code> package.</p>
<div class="cell slide-in">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\014</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for required packages</span></span>
<span id="cb11-4">required <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"crayon"</span>)</span>
<span id="cb11-5"></span>
<span id="cb11-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (pkg <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> required) {</span>
<span id="cb11-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">requireNamespace</span>(pkg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quietly =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)) {</span>
<span id="cb11-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"❗ Package '"</span>, pkg, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"' is not installed. Please install it with install.packages(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, pkg, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>)</span>
<span id="cb11-9">  }</span>
<span id="cb11-10">}</span>
<span id="cb11-11"></span>
<span id="cb11-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load colors</span></span>
<span id="cb11-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">requireNamespace</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"crayon"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quietly =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)) {</span>
<span id="cb11-14">  bold <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> crayon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>bold</span>
<span id="cb11-15">  blue <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> crayon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>blue</span>
<span id="cb11-16">  green <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> crayon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>green</span>
<span id="cb11-17">  magenta <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> crayon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>magenta</span>
<span id="cb11-18">  cyan <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> crayon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>cyan</span>
<span id="cb11-19">  yellow <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> crayon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>yellow</span>
<span id="cb11-20">} <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb11-21">  bold <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> blue <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> green <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> magenta <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cyan <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> yellow <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> identity</span>
<span id="cb11-22">}</span>
<span id="cb11-23"></span>
<span id="cb11-24"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb11-25"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bold</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">blue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  🖥️ SYSTEM STATUS REPORT"</span>)))</span>
<span id="cb11-26"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb11-27"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb11-28"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">yellow</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  📅 Date: "</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.Date</span>())</span>
<span id="cb11-29"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">yellow</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  ⏰ Time: "</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%H:%M:%S"</span>))</span>
<span id="cb11-30"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb11-31"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cyan</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"╭────────────────────────────────────────────╮"</span>))</span>
<span id="cb11-32"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb11-33"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  🔧 R Version: "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">green</span>(R.version.string))</span>
<span id="cb11-34"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  💻 Platform: "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">green</span>(R.version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>platform))</span>
<span id="cb11-35"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb11-36"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cyan</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  ──────────────────────────────────────────"</span>))</span>
<span id="cb11-37"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb11-38"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  📁 Working Directory: "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">magenta</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">basename</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>())))</span>
<span id="cb11-39"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  📦 Attached Packages: "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">magenta</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^package:"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">search</span>()))))</span>
<span id="cb11-40"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb11-41"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cyan</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"╰────────────────────────────────────────────╯"</span>))</span>
<span id="cb11-42"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb11-43"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb11-44"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bold</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">green</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  Ready for data analysis! 🎯"</span>)))</span></code></pre></div>
</div>
<div class="slide-in">
<p><img src="https://thesocialsciencesofa.com/blog/2025-07-07/05_rprofile_system_info_02.jpg" alt="Console Output showing system information in colours." width="100%"></p>
</div>
<p>Notice how we are being responsible developers here? We check for package availability using <code>requireNamespace()</code> with <code>quietly = TRUE</code> to avoid annoying error messages. The <code>identity</code> function is our safety net. It is like having a backup plan that just returns whatever you give it, effectively removing color formatting when crayon is not available.</p>
<p>This is the kind of defensive programming that separates the experienced programmers from novices. Your <code>.Rprofile</code> should enhance your experience, not break it when a package goes missing.</p>
</section>
<section id="the-palette-master-creating-your-signature-style" class="level2">
<h2 class="anchored" data-anchor-id="the-palette-master-creating-your-signature-style">The Palette Master: Creating Your Signature Style</h2>
<p>For those who want complete control over their aesthetic destiny, let us create custom color schemes using RGB values. This is where you can really make your startup screen uniquely yours.</p>
<div class="cell slide-in">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\014</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for required packages</span></span>
<span id="cb12-4">required <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"crayon"</span>)</span>
<span id="cb12-5"></span>
<span id="cb12-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (pkg <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> required) {</span>
<span id="cb12-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">requireNamespace</span>(pkg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quietly =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)) {</span>
<span id="cb12-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"❗ Package '"</span>, pkg, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"' is not installed. Please install it with install.packages(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, pkg, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>)</span>
<span id="cb12-9">  }</span>
<span id="cb12-10">}</span>
<span id="cb12-11"></span>
<span id="cb12-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">requireNamespace</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"crayon"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quietly =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)) {</span>
<span id="cb12-13">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create custom RGB styles (values between 0–255)</span></span>
<span id="cb12-14">  title_col     <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> crayon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_style</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rgb</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">114</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">156</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">maxColorValue =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>))</span>
<span id="cb12-15">  label_col     <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> crayon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_style</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rgb</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">114</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">156</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">maxColorValue =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>))</span>
<span id="cb12-16">  value_col     <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> crayon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_style</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rgb</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">233</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">228</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">222</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">maxColorValue =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>))</span>
<span id="cb12-17">  section_col   <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> crayon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_style</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rgb</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">165</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">93</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">53</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">maxColorValue =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>))</span>
<span id="cb12-18">  </span>
<span id="cb12-19">  bold <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> crayon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>bold</span>
<span id="cb12-20">} <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb12-21">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fallback to identity if crayon is unavailable</span></span>
<span id="cb12-22">  title_col <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> label_col <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> value_col <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> section_col <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> bold <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> identity</span>
<span id="cb12-23">}</span>
<span id="cb12-24"></span>
<span id="cb12-25"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb12-26"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bold</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title_col</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  🖥️ SYSTEM STATUS REPORT"</span>)))</span>
<span id="cb12-27"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb12-28"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb12-29"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">label_col</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  📅 Date: "</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">value_col</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.Date</span>()))</span>
<span id="cb12-30"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">label_col</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  ⏰ Time: "</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">value_col</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%H:%M:%S"</span>)))</span>
<span id="cb12-31"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb12-32"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">section_col</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"╭────────────────────────────────────────────╮"</span>))</span>
<span id="cb12-33"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb12-34"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">label_col</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  🔧 R Version: "</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">value_col</span>(R.version.string))</span>
<span id="cb12-35"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">label_col</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  💻 Platform: "</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">value_col</span>(R.version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>platform))</span>
<span id="cb12-36"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb12-37"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">section_col</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  ──────────────────────────────────────────"</span>))</span>
<span id="cb12-38"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb12-39"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">label_col</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  📁 Working Directory: "</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">value_col</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">basename</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>())))</span>
<span id="cb12-40"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">label_col</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  📦 Attached Packages: "</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">value_col</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^package:"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">search</span>()))))</span>
<span id="cb12-41"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb12-42"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">section_col</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"╰────────────────────────────────────────────╯"</span>))</span>
<span id="cb12-43"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb12-44"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb12-45"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bold</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">value_col</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  Ready for data analysis! 🚀"</span>)))</span></code></pre></div>
</div>
<div class="slide-in">
<p><img src="https://thesocialsciencesofa.com/blog/2025-07-07/06_rprofile_system_info_03.jpg" alt="Console Output showing system information in custom-themed colours." width="100%"></p>
</div>
<p>This approach gives you complete control over your color scheme. You can match your favorite color palette, align with your company’s branding, or just create something that makes you smile every morning. The <code>make_style()</code> function accepts RGB values, so you can be as precise as you want with your color choices.</p>
<p>Pro tip: Use an online color picker to find the perfect RGB values for your palette. There is something deeply satisfying about having a perfectly curated color scheme that is uniquely yours. <a href="https://pinterest.com">Pinterest</a> is usually where I get my colour palette inspirations from.</p>
</section>
<section id="the-weather-station-the-power-of-apis" class="level2">
<h2 class="anchored" data-anchor-id="the-weather-station-the-power-of-apis">The Weather Station: The power of APIs</h2>
<p>So far, we have been working with static, local information. But what if we could break free from the confines of our computer and connect with the wider world? What if your startup screen could tell you whether you will need an umbrella for your lunch break or not?</p>
<p>Welcome to the world of dynamic content. Here is how to turn your R startup into a personal weather station:</p>
<div class="cell slide-in">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\014</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Attempt to fetch and display weather information</span></span>
<span id="cb13-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tryCatch</span>({</span>
<span id="cb13-5">  </span>
<span id="cb13-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for required packages</span></span>
<span id="cb13-7">  required <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"httr"</span>)</span>
<span id="cb13-8">  </span>
<span id="cb13-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (pkg <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> required) {</span>
<span id="cb13-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">requireNamespace</span>(pkg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quietly =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)) {</span>
<span id="cb13-11">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"❗ Package '"</span>, pkg, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"' is not installed. Please install it with install.packages(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, pkg, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>)</span>
<span id="cb13-12">    }</span>
<span id="cb13-13">  }</span>
<span id="cb13-14">  </span>
<span id="cb13-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fetch weather data from wttr.in API</span></span>
<span id="cb13-16">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This format provides a compact weather summary</span></span>
<span id="cb13-17">  response <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> httr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GET</span>(</span>
<span id="cb13-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://wttr.in/London?format=%l%0A%c%0A%t%20|%20Temperature%0A%f%20|%20Real%20Feel%0A%20%h%20%20|%20Humidity%0A'</span>,</span>
<span id="cb13-19">    httr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">timeout</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb13-20">  </span>
<span id="cb13-21">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if the API request was successful</span></span>
<span id="cb13-22">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (httr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">status_code</span>(response) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>) {</span>
<span id="cb13-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the weather information</span></span>
<span id="cb13-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(httr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">content</span>(response, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>))</span>
<span id="cb13-25">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb13-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Log any HTTP errors</span></span>
<span id="cb13-27">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Weather service returned code: "</span>, httr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">status_code</span>(response))</span>
<span id="cb13-28">  }</span>
<span id="cb13-29">  </span>
<span id="cb13-30">}, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">error =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(e) {</span>
<span id="cb13-31">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Handle any errors gracefully without breaking RStudio startup</span></span>
<span id="cb13-32">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Weather fetch error: "</span>, e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>message)</span>
<span id="cb13-33">})</span></code></pre></div>
</div>
<div class="slide-in">
<p><img src="https://thesocialsciencesofa.com/blog/2025-07-07/07_rprofile_weather_api.jpg" alt="Console showing the current weather in London. In particular, it shows the temperature, real feel and humidity." width="100%"></p>
</div>
<p>This code uses the fantastic <a href="https://wttr.in/">wttr.in</a> service, which provides weather data with a delightfully simple API. The service will automatically detect your location based on your IP address, or you can specify a city by changing “London” to your preferred location.</p>
<p>The <code>GET()</code> function from the <code>httr</code> packages makes the HTTP request, and we set a timeout to prevent your startup from hanging if the weather service is having a bad day. The <code>tryCatch()</code> wrapper is our safety net as it ensures that if something goes wrong with the weather fetch, your RStudio startup will not crash and burn.</p>
<p>Notice how we are building in resilience here. The internet is a fickle beast, and APIs can fail. Good startup customisation code should degrade gracefully when things go wrong.</p>
</section>
<section id="the-daily-sage-wisdom-at-your-fingertips" class="level2">
<h2 class="anchored" data-anchor-id="the-daily-sage-wisdom-at-your-fingertips">The Daily Sage: Wisdom at Your Fingertips</h2>
<p>Weather is practical, but what about feeding your soul? Let us add some daily inspiration to your startup routine, because sometimes, the difference between a good day and a great day is a perfectly timed dose of wisdom.</p>
<div class="cell slide-in">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure required packages are available</span></span>
<span id="cb14-2">required <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"httr"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jsonlite"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"glue"</span>)</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (pkg <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> required) {</span>
<span id="cb14-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">requireNamespace</span>(pkg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quietly =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)) {</span>
<span id="cb14-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"❗ Package '"</span>, pkg, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"' is not installed. Please install it with install.packages(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, pkg, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>)</span>
<span id="cb14-7">  }</span>
<span id="cb14-8">}</span>
<span id="cb14-9"></span>
<span id="cb14-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fetch and display quote of the day</span></span>
<span id="cb14-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tryCatch</span>({</span>
<span id="cb14-12">  res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> httr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GET</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://zenquotes.io/api/random"</span>, httr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">timeout</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb14-13">  </span>
<span id="cb14-14">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (httr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">status_code</span>(res) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>) {</span>
<span id="cb14-15">    raw_txt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> httr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">content</span>(res, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">encoding =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UTF-8"</span>)</span>
<span id="cb14-16">    </span>
<span id="cb14-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parse and extract quote</span></span>
<span id="cb14-18">    quote_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> jsonlite<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromJSON</span>(raw_txt)</span>
<span id="cb14-19">    quote <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> quote_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>q</span>
<span id="cb14-20">    author <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> quote_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>a</span>
<span id="cb14-21">    </span>
<span id="cb14-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">🧠 Quote of the Day:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{quote}" — {author}</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>))</span>
<span id="cb14-23">    </span>
<span id="cb14-24">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb14-25">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Quote service returned code: "</span>, httr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">status_code</span>(res))</span>
<span id="cb14-26">  }</span>
<span id="cb14-27">}, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">error =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(e) {</span>
<span id="cb14-28">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Quote fetch error: "</span>, e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>message)</span>
<span id="cb14-29">})</span></code></pre></div>
</div>
<div class="slide-in">
<p><img src="https://thesocialsciencesofa.com/blog/2025-07-07/08_rprofile_quote_of_the_day.jpg" alt="Console showing a random quote of the day retrieved from zenquotes.io" width="100%"></p>
</div>
<p>This example introduces some new friends to our toolkit: - <code>jsonlite</code>: For parsing JSON responses with elegance - <code>glue</code>: String interpolation that actually makes sense (unlike <code>paste()</code>)</p>
<p>The <a href="https://zenquotes.io/">ZenQuotes API</a> is a gem – it provides inspirational quotes without requiring API keys or complex authentication. The <code>jsonlite::fromJSON()</code> function parses the JSON response, and we extract the quote and author fields.</p>
<p>Notice how we are building in backup wisdom for when the API fails? Having a plan B for when technology lets you down is never a bad idea.</p>
</section>
<section id="the-perils-of-paradise-what-could-go-wrong" class="level2">
<h2 class="anchored" data-anchor-id="the-perils-of-paradise-what-could-go-wrong">The Perils of Paradise: What Could Go Wrong?</h2>
<p>Before you go completely overboard with dynamic content (and trust me, the temptation is real), let us talk about the trade-offs. Every paradise has its serpents, and startup customisation is no exception.</p>
<p><strong>The Network Dependency Dilemma</strong>: All those beautiful dynamic features only work when you are connected to the internet. Work from a coffee shop with spotty WiFi? You might stare at error messages instead of inspiring quotes. The solution? Always include fallback content for offline scenarios.</p>
<p><strong>The Speed Trap</strong>: Fetching external data adds latency to your startup. While we are talking seconds, not minutes, some users prefer their R sessions to start faster than you can say “statistical significance”. Consider your personal patience levels when adding network-dependent features.</p>
<p><strong>The API Reliability Roulette</strong>: Third-party services can go down, change their APIs, or start requiring authentication. Always wrap your API calls in error handling, and do not let a broken quote service break your entire R startup experience.</p>
<p><strong>The Rate Limit Reality</strong>: Some APIs have rate limits. If you are the type who starts R sessions every five minutes while debugging, you might hit these limits. Choose your APIs wisely, and do not abuse the free tiers.</p>
</section>
<section id="the-infinite-possibility-engine-where-dreams-become-code" class="level2">
<h2 class="anchored" data-anchor-id="the-infinite-possibility-engine-where-dreams-become-code">The Infinite Possibility Engine: Where Dreams Become Code</h2>
<p>The examples we have explored are just the tip of the iceberg. Your <code>.Rprofile</code> is a canvas limited only by your imagination and your tolerance for startup complexity. Here are some ideas to fuel your creativity:</p>
<p><strong>The Project Detective</strong>: Write code that examines your current working directory and provides project-specific information. Working on a machine learning project? Get a reminder of your model’s latest performance. Analyzing survey data? See a quick summary of your response rates.</p>
<p><strong>The Package Sentinel</strong>: Create a system that checks for outdated packages and gently reminds you to update them. No more surprises when that function you have been using for months suddenly breaks because of a breaking change in a dependency.</p>
<p><strong>The Git Whisperer</strong>: If you are working with version control, display the current branch and repository status. Are you on <code>main</code> when you should be on <code>develop</code>? Your startup screen can save you from committing to the wrong branch.</p>
<p><strong>The Calendar Oracle</strong>: Connect to your calendar API and display upcoming meetings or deadlines. Nothing says “professional data scientist” like having your startup screen remind you about that 2 pm stakeholder meeting.</p>
<p><strong>The Motivation Engine</strong>: Create a rotating set of personal motivational messages tailored to your current challenges. Working on a particularly difficult analysis? Let your startup screen be your cheerleader.</p>
<p>You might also explore the <a href="https://cran.r-project.org/web/packages/cowsay/index.html">cowsay package</a> for ASCII animals that can deliver your messages (because everything is better when a cow says it), or investigate APIs that require authentication for more personalised data.</p>
</section>
<section id="the-wisdom-of-experience-key-takeaways" class="level2">
<h2 class="anchored" data-anchor-id="the-wisdom-of-experience-key-takeaways">The Wisdom of Experience: Key Takeaways</h2>
<p>From our journey through the world of RStudio customisation, you should now possess:</p>
<ol type="1">
<li><p><strong>The Foundation</strong>: Understanding how <code>.Rprofile</code> and <code>setHook()</code> work together to create startup magic</p></li>
<li><p><strong>The Art of Progression</strong>: Building from simple console clearing to complex, dynamic content displays</p></li>
<li><p><strong>The Defensive Mindset</strong>: Using <code>tryCatch()</code> and <code>requireNamespace()</code> to create robust code that enhances rather than breaks your workflow</p></li>
<li><p><strong>The Dependency Dance</strong>: Managing package requirements and providing graceful fallbacks</p></li>
<li><p><strong>The Network Navigator</strong>: Integrating external APIs while handling the unpredictable nature of the internet</p></li>
<li><p><strong>The String Sculptor</strong>: Using <code>glue</code> for readable formatting and <code>crayon</code> for colorful output</p></li>
<li><p><strong>The Balance Master</strong>: Understanding the trade-offs between functionality and simplicity, online features and offline reliability</p></li>
</ol>
</section>
<section id="the-final-word-why-this-matters" class="level2">
<h2 class="anchored" data-anchor-id="the-final-word-why-this-matters">The Final Word: Why This Matters</h2>
<p>Customising your <code>.Rprofile</code> will not make you a better data scientist. It will not improve your statistical modeling skills or make your visualisations more insightful. What it will do is make your daily R experience more personal, more delightful, and more uniquely yours.</p>
<p>In a world where we spend countless hours staring at screens, fighting with data, and debugging code, these small moments of joy matter. They are the difference between viewing your tools as cold, impersonal utilities and seeing them as extensions of your personality and creativity.</p>
<p>The key is finding the right balance for your workflow. Some days you will want the full ASCII art, weather report, and inspirational quote experience. On other days, you will appreciate the simple elegance of a cleared console and a friendly greeting.</p>
<p>Your <code>.Rprofile</code> is yours to customise. Make it reflect who you are, what you care about, and what makes you smile. In the end, we are not just researchers, analysts and students, we are humans who happen to love working with data. And sometimes, a little personality in our tools can make all the difference.</p>
</section>
<section id="sources-used-and-further-reading" class="level2">
<h2 class="anchored" data-anchor-id="sources-used-and-further-reading">Sources used and further reading</h2>
<p><strong>R Packages Used:</strong></p>
<ul>
<li><a href="https://cran.r-project.org/web/packages/crayon/index.html">crayon</a> | Transform your console into a rainbow</li>
<li><a href="https://cran.r-project.org/web/packages/httr/index.html">httr</a> | Your bridge to the web</li>
<li><a href="https://cran.r-project.org/web/packages/jsonlite/index.html">jsonlite</a> | JSON parsing that does not hurt your brain</li>
<li><a href="https://cran.r-project.org/web/packages/glue/index.html">glue</a> | String interpolation for civilized humans</li>
<li><a href="https://cran.r-project.org/web/packages/cowsay/index.html">cowsay</a> | Because ASCII animals make everything better</li>
</ul>
<p><strong>APIs and Services for Dynamic Content:</strong></p>
<ul>
<li><a href="https://github.com/chubin/wttr.in">wttr.in</a> | Weather data without the API key hassle</li>
<li><a href="https://zenquotes.io/">ZenQuotes</a> | Daily wisdom for your soul</li>
<li><a href="https://www.asciiart.eu/text-to-ascii-art">ASCII Art Generator</a> | Turn text into art</li>
</ul>
<p><strong>Essential R Resources:</strong></p>
<ul>
<li><a href="https://stat.ethz.ch/R-manual/R-devel/library/base/html/Startup.html">R Startup Documentation</a> - The official word on R startup</li>
<li><a href="https://r4np.com">R for Non-Programmers</a> - Comprehensive R learning for everyone</li>
</ul>
<p>Happy customising, and may your R sessions be forever more delightful! 🎯✨</p>


</section>

 ]]></description>
  <category>R</category>
  <category>RStudio</category>
  <category>Productivity</category>
  <category>Customisation</category>
  <guid>https://thesocialsciencesofa.com/blog/2025-07-07/rprofile_customisation.html</guid>
  <pubDate>Sun, 06 Jul 2025 23:00:00 GMT</pubDate>
  <media:content url="https://thesocialsciencesofa.com/blog/2025-07-07/custom_rprofile.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Taming Multi-Dimensional Tables with gt</title>
  <dc:creator>Daniel Dauber</dc:creator>
  <link>https://thesocialsciencesofa.com/blog/2025-06-30/multi-dimensional-gt-tables-r.html</link>
  <description><![CDATA[ 
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin="">
<link href="https://fonts.googleapis.com/css2?family=Fira+Code:wght@300..700&amp;family=Fredoka:wght@300..700&amp;family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&amp;family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&amp;family=Quicksand:wght@300..700&amp;family=Source+Code+Pro:ital,wght@0,200..900;1,200..900&amp;display=swap" rel="stylesheet">

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.13.1/font/bootstrap-icons.min.css">





<div class="slide-in">
<p><img src="https://thesocialsciencesofa.com/blog/2025-06-30/multi-dimensional-gt-tables-r.jpg" alt="A screenshot of a cleanly formatted multi-dimensional table created with the gt package." width="100%"></p>
</div>
<p>Creating beautiful tables in R has never been easier thanks to the <a href="https://gt.rstudio.com/"><code>gt</code> package</a>. But what happens when your “simple” table suddenly needs three dimensions? That’s when things get interesting – and by interesting, I mean frustratingly complex.</p>
<p>Today, we’ll walk through creating a multi-dimensional table that displays relationship status by gender across different countries. We’ll start simple and work our way up to the challenges that make you question your life choices (and then solve them, of course).</p>
<section id="meet-the-gt-package" class="level2">
<h2 class="anchored" data-anchor-id="meet-the-gt-package">Meet the GT Package</h2>
<p>The <a href="https://gt.rstudio.com/"><code>gt</code> package</a> by RStudio is a grammar of tables that makes creating publication-ready tables surprisingly enjoyable. Think of it as <code>ggplot2</code> for tables – it’s structured, flexible, and produces gorgeous output with relatively little code.</p>
<p>The package follows a layered approach: you start with your data, create a basic <code>gt()</code> object, then add layers of formatting, styling, and functionality. Each function adds a specific element to your table, making the code readable and the process intuitive.</p>
<p>If you’re new to R or finding this tutorial challenging to follow, I’d recommend checking out <a href="https://r4np.com">R for Non-Programmers</a> for a more gentle introduction to R fundamentals.</p>
</section>
<section id="our-data-world-values-survey" class="level2">
<h2 class="anchored" data-anchor-id="our-data-world-values-survey">Our Data: World Values Survey</h2>
<p>We’ll be working with data from the World Values Survey (WVS), which contains responses from people across different countries about their values and demographics. The <code>wvs_nona</code> dataset is a cleaned version where missing values have been removed (hence “nona” = no NAs).</p>
<p>If you want to follow along, you can get the dataset from the <a href="https://github.com/yourrepo/r4np"><code>r4np</code> package</a>:</p>
<div class="cell slide-in">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install if you haven't already</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install.packages("r4np")</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(gt)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(gtExtras)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(r4np)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The dataset we'll use</span></span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(wvs_nona)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 6
  country gender   age relationship_status freedom_of_choice satisfaction
  &lt;fct&gt;   &lt;fct&gt;  &lt;dbl&gt; &lt;fct&gt;                           &lt;dbl&gt;        &lt;dbl&gt;
1 Bolivia male      60 married                             7            5
2 Bolivia male      40 married                             8            7
3 Bolivia male      25 single                             10            8
4 Bolivia female    71 widowed                             5            5
5 Bolivia female    38 married                             5            7
6 Bolivia female    20 separated                           5            3</code></pre>
</div>
</div>
<p>Our goal is to create a table showing the relationship between three variables: <code>country</code>, <code>gender</code>, and <code>relationship_status</code>. This is what makes it “multi-dimensional” – we’re not just showing a simple two-way relationship, but a three-way interaction.</p>
</section>
<section id="step-1-the-innocent-beginning" class="level2">
<h2 class="anchored" data-anchor-id="step-1-the-innocent-beginning">Step 1: The Innocent Beginning</h2>
<p>Let’s start with what seems like a straightforward task: create a table showing the count of married, separated, and divorced people by gender across countries.</p>
<p>First, we need to count the combinations of our three variables:</p>
<div class="cell slide-in">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create our base data</span></span>
<span id="cb3-2">table_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> wvs_nona <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(gender, country, relationship_status) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(relationship_status <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"married"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"separated"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"divorced"</span>))</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Take a peek</span></span>
<span id="cb3-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(table_data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 4
  gender country relationship_status     n
  &lt;fct&gt;  &lt;fct&gt;   &lt;fct&gt;               &lt;int&gt;
1 female Bolivia married               383
2 female Bolivia separated              62
3 female Bolivia divorced               27
4 female Iran    married               448
5 female Iran    separated               4
6 female Iran    divorced               24</code></pre>
</div>
</div>
<p>The <code>count()</code> function is doing the heavy lifting here. It groups by the three variables we specify and counts how many observations fall into each combination. The <code>filter()</code> step narrows our focus to just three relationship statuses – we’re keeping the analysis manageable.</p>
<p>This gives us a “long” format dataset where each row represents one combination of country, gender, and relationship status, with the count in the <code>n</code> column.</p>
<p>Now we need to reshape this data to make it suitable for a table. We want countries as rows and the gender-relationship combinations as columns:</p>
<div class="cell slide-in">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reshape for table format</span></span>
<span id="cb5-2">wide_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> table_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id_cols =</span> country,</span>
<span id="cb5-4">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_from =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(gender, relationship_status),</span>
<span id="cb5-5">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_from =</span> n)</span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(wide_data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 7
  country female_married female_separated female_divorced male_married
  &lt;fct&gt;            &lt;int&gt;            &lt;int&gt;           &lt;int&gt;        &lt;int&gt;
1 Bolivia            383               62              27          376
2 Iran               448                4              24          518
3 Iraq               442                6              10          423
4 Japan              525                4              49          464
5 Korea              491                1               1          407
6 Egypt              399               10              23          434
# ℹ 2 more variables: male_separated &lt;int&gt;, male_divorced &lt;int&gt;</code></pre>
</div>
</div>
<p><code>pivot_wider()</code> is the magic function here. Let’s break down what each argument does:</p>
<ul>
<li><code>id_cols = country</code>: This tells R that <code>country</code> should remain as a column (our row identifier)</li>
<li><code>names_from = c(gender, relationship_status)</code>: These two variables will become column names</li>
<li><code>values_from = n</code>: The values that fill the table come from the <code>n</code> column (our counts)</li>
</ul>
<p>The result is columns with names like <code>female_married</code>, <code>male_divorced</code>, etc. R automatically combines the values from <code>gender</code> and <code>relationship_status</code> with an underscore.</p>
<p>Now let’s create our first GT table:</p>
<div class="cell slide-in">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Our first attempt</span></span>
<span id="cb7-2">basic_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> wide_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gt</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tab_header</span>(</span>
<span id="cb7-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"World Value Survey (WVS)"</span>,</span>
<span id="cb7-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Relationship Status by Gender and Country"</span></span>
<span id="cb7-7">  )</span>
<span id="cb7-8"></span>
<span id="cb7-9">basic_table</span></code></pre></div>
<div class="cell-output-display">
<div id="tbqxewwjlu" style="padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;">
<style>#tbqxewwjlu table {
  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

#tbqxewwjlu thead, #tbqxewwjlu tbody, #tbqxewwjlu tfoot, #tbqxewwjlu tr, #tbqxewwjlu td, #tbqxewwjlu th {
  border-style: none;
}

#tbqxewwjlu p {
  margin: 0;
  padding: 0;
}

#tbqxewwjlu .gt_table {
  display: table;
  border-collapse: collapse;
  line-height: normal;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#tbqxewwjlu .gt_caption {
  padding-top: 4px;
  padding-bottom: 4px;
}

#tbqxewwjlu .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#tbqxewwjlu .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 3px;
  padding-bottom: 5px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#tbqxewwjlu .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#tbqxewwjlu .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#tbqxewwjlu .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#tbqxewwjlu .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#tbqxewwjlu .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#tbqxewwjlu .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#tbqxewwjlu .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#tbqxewwjlu .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 5px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#tbqxewwjlu .gt_spanner_row {
  border-bottom-style: hidden;
}

#tbqxewwjlu .gt_group_heading {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  text-align: left;
}

#tbqxewwjlu .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#tbqxewwjlu .gt_from_md > :first-child {
  margin-top: 0;
}

#tbqxewwjlu .gt_from_md > :last-child {
  margin-bottom: 0;
}

#tbqxewwjlu .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#tbqxewwjlu .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
}

#tbqxewwjlu .gt_stub_row_group {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
  vertical-align: top;
}

#tbqxewwjlu .gt_row_group_first td {
  border-top-width: 2px;
}

#tbqxewwjlu .gt_row_group_first th {
  border-top-width: 2px;
}

#tbqxewwjlu .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#tbqxewwjlu .gt_first_summary_row {
  border-top-style: solid;
  border-top-color: #D3D3D3;
}

#tbqxewwjlu .gt_first_summary_row.thick {
  border-top-width: 2px;
}

#tbqxewwjlu .gt_last_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#tbqxewwjlu .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#tbqxewwjlu .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#tbqxewwjlu .gt_last_grand_summary_row_top {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: double;
  border-bottom-width: 6px;
  border-bottom-color: #D3D3D3;
}

#tbqxewwjlu .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#tbqxewwjlu .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#tbqxewwjlu .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#tbqxewwjlu .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#tbqxewwjlu .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#tbqxewwjlu .gt_sourcenote {
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#tbqxewwjlu .gt_left {
  text-align: left;
}

#tbqxewwjlu .gt_center {
  text-align: center;
}

#tbqxewwjlu .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#tbqxewwjlu .gt_font_normal {
  font-weight: normal;
}

#tbqxewwjlu .gt_font_bold {
  font-weight: bold;
}

#tbqxewwjlu .gt_font_italic {
  font-style: italic;
}

#tbqxewwjlu .gt_super {
  font-size: 65%;
}

#tbqxewwjlu .gt_footnote_marks {
  font-size: 75%;
  vertical-align: 0.4em;
  position: initial;
}

#tbqxewwjlu .gt_asterisk {
  font-size: 100%;
  vertical-align: 0;
}

#tbqxewwjlu .gt_indent_1 {
  text-indent: 5px;
}

#tbqxewwjlu .gt_indent_2 {
  text-indent: 10px;
}

#tbqxewwjlu .gt_indent_3 {
  text-indent: 15px;
}

#tbqxewwjlu .gt_indent_4 {
  text-indent: 20px;
}

#tbqxewwjlu .gt_indent_5 {
  text-indent: 25px;
}

#tbqxewwjlu .katex-display {
  display: inline-flex !important;
  margin-bottom: 0.75em !important;
}

#tbqxewwjlu div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {
  height: 0px !important;
}
</style>

<table class="gt_table table table-sm table-striped small" data-quarto-postprocess="true" data-quarto-disable-processing="false" data-quarto-bootstrap="false">
<thead>
<tr class="header gt_heading">
<th colspan="7" class="gt_heading gt_title gt_font_normal">World Value Survey (WVS)</th>
</tr>
<tr class="odd gt_heading">
<th colspan="7" class="gt_heading gt_subtitle gt_font_normal gt_bottom_border">Relationship Status by Gender and Country</th>
</tr>
<tr class="header gt_col_headings">
<th id="country" class="gt_col_heading gt_columns_bottom_border gt_center" data-quarto-table-cell-role="th" scope="col">country</th>
<th id="female_married" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">female_married</th>
<th id="female_separated" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">female_separated</th>
<th id="female_divorced" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">female_divorced</th>
<th id="male_married" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">male_married</th>
<th id="male_separated" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">male_separated</th>
<th id="male_divorced" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">male_divorced</th>
</tr>
</thead>
<tbody class="gt_table_body">
<tr class="odd">
<td class="gt_row gt_center" headers="country">Bolivia</td>
<td class="gt_row gt_right" headers="female_married">383</td>
<td class="gt_row gt_right" headers="female_separated">62</td>
<td class="gt_row gt_right" headers="female_divorced">27</td>
<td class="gt_row gt_right" headers="male_married">376</td>
<td class="gt_row gt_right" headers="male_separated">34</td>
<td class="gt_row gt_right" headers="male_divorced">24</td>
</tr>
<tr class="even">
<td class="gt_row gt_center" headers="country">Iran</td>
<td class="gt_row gt_right" headers="female_married">448</td>
<td class="gt_row gt_right" headers="female_separated">4</td>
<td class="gt_row gt_right" headers="female_divorced">24</td>
<td class="gt_row gt_right" headers="male_married">518</td>
<td class="gt_row gt_right" headers="male_separated">8</td>
<td class="gt_row gt_right" headers="male_divorced">6</td>
</tr>
<tr class="odd">
<td class="gt_row gt_center" headers="country">Iraq</td>
<td class="gt_row gt_right" headers="female_married">442</td>
<td class="gt_row gt_right" headers="female_separated">6</td>
<td class="gt_row gt_right" headers="female_divorced">10</td>
<td class="gt_row gt_right" headers="male_married">423</td>
<td class="gt_row gt_right" headers="male_separated">5</td>
<td class="gt_row gt_right" headers="male_divorced">9</td>
</tr>
<tr class="even">
<td class="gt_row gt_center" headers="country">Japan</td>
<td class="gt_row gt_right" headers="female_married">525</td>
<td class="gt_row gt_right" headers="female_separated">4</td>
<td class="gt_row gt_right" headers="female_divorced">49</td>
<td class="gt_row gt_right" headers="male_married">464</td>
<td class="gt_row gt_right" headers="male_separated">1</td>
<td class="gt_row gt_right" headers="male_divorced">20</td>
</tr>
<tr class="odd">
<td class="gt_row gt_center" headers="country">Korea</td>
<td class="gt_row gt_right" headers="female_married">491</td>
<td class="gt_row gt_right" headers="female_separated">1</td>
<td class="gt_row gt_right" headers="female_divorced">1</td>
<td class="gt_row gt_right" headers="male_married">407</td>
<td class="gt_row gt_right" headers="male_separated">NA</td>
<td class="gt_row gt_right" headers="male_divorced">7</td>
</tr>
<tr class="even">
<td class="gt_row gt_center" headers="country">Egypt</td>
<td class="gt_row gt_right" headers="female_married">399</td>
<td class="gt_row gt_right" headers="female_separated">10</td>
<td class="gt_row gt_right" headers="female_divorced">23</td>
<td class="gt_row gt_right" headers="male_married">434</td>
<td class="gt_row gt_right" headers="male_separated">7</td>
<td class="gt_row gt_right" headers="male_divorced">9</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>The <code>gt()</code> function creates the basic table object, and <code>tab_header()</code> adds a title and subtitle. Simple enough, but not very pretty.</p>
</section>
<section id="step-2-the-plot-thickens" class="level2">
<h2 class="anchored" data-anchor-id="step-2-the-plot-thickens">Step 2: The Plot Thickens</h2>
<p>Our basic table works, but it’s not exactly reader-friendly. Those column names like <code>female_married</code> are functional but ugly. We want to group them under gender headers with clean sub-labels.</p>
<p>“No problem,” you think, “I’ll just use <code>tab_spanner_delim()</code>!”</p>
<div class="cell slide-in">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Attempt with tab_spanner_delim()</span></span>
<span id="cb8-2">spanners_attempt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> wide_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gt</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tab_header</span>(</span>
<span id="cb8-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"World Value Survey (WVS)"</span>,</span>
<span id="cb8-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Relationship Status by Gender and Country"</span>  </span>
<span id="cb8-7">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tab_spanner_delim</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>)</span>
<span id="cb8-9"></span>
<span id="cb8-10">spanners_attempt</span></code></pre></div>
<div class="cell-output-display">
<div id="kcwsensuft" style="padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;">
<style>#kcwsensuft table {
  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

#kcwsensuft thead, #kcwsensuft tbody, #kcwsensuft tfoot, #kcwsensuft tr, #kcwsensuft td, #kcwsensuft th {
  border-style: none;
}

#kcwsensuft p {
  margin: 0;
  padding: 0;
}

#kcwsensuft .gt_table {
  display: table;
  border-collapse: collapse;
  line-height: normal;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#kcwsensuft .gt_caption {
  padding-top: 4px;
  padding-bottom: 4px;
}

#kcwsensuft .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#kcwsensuft .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 3px;
  padding-bottom: 5px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#kcwsensuft .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#kcwsensuft .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#kcwsensuft .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#kcwsensuft .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#kcwsensuft .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#kcwsensuft .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#kcwsensuft .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#kcwsensuft .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 5px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#kcwsensuft .gt_spanner_row {
  border-bottom-style: hidden;
}

#kcwsensuft .gt_group_heading {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  text-align: left;
}

#kcwsensuft .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#kcwsensuft .gt_from_md > :first-child {
  margin-top: 0;
}

#kcwsensuft .gt_from_md > :last-child {
  margin-bottom: 0;
}

#kcwsensuft .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#kcwsensuft .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
}

#kcwsensuft .gt_stub_row_group {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
  vertical-align: top;
}

#kcwsensuft .gt_row_group_first td {
  border-top-width: 2px;
}

#kcwsensuft .gt_row_group_first th {
  border-top-width: 2px;
}

#kcwsensuft .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#kcwsensuft .gt_first_summary_row {
  border-top-style: solid;
  border-top-color: #D3D3D3;
}

#kcwsensuft .gt_first_summary_row.thick {
  border-top-width: 2px;
}

#kcwsensuft .gt_last_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#kcwsensuft .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#kcwsensuft .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#kcwsensuft .gt_last_grand_summary_row_top {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: double;
  border-bottom-width: 6px;
  border-bottom-color: #D3D3D3;
}

#kcwsensuft .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#kcwsensuft .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#kcwsensuft .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#kcwsensuft .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#kcwsensuft .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#kcwsensuft .gt_sourcenote {
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#kcwsensuft .gt_left {
  text-align: left;
}

#kcwsensuft .gt_center {
  text-align: center;
}

#kcwsensuft .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#kcwsensuft .gt_font_normal {
  font-weight: normal;
}

#kcwsensuft .gt_font_bold {
  font-weight: bold;
}

#kcwsensuft .gt_font_italic {
  font-style: italic;
}

#kcwsensuft .gt_super {
  font-size: 65%;
}

#kcwsensuft .gt_footnote_marks {
  font-size: 75%;
  vertical-align: 0.4em;
  position: initial;
}

#kcwsensuft .gt_asterisk {
  font-size: 100%;
  vertical-align: 0;
}

#kcwsensuft .gt_indent_1 {
  text-indent: 5px;
}

#kcwsensuft .gt_indent_2 {
  text-indent: 10px;
}

#kcwsensuft .gt_indent_3 {
  text-indent: 15px;
}

#kcwsensuft .gt_indent_4 {
  text-indent: 20px;
}

#kcwsensuft .gt_indent_5 {
  text-indent: 25px;
}

#kcwsensuft .katex-display {
  display: inline-flex !important;
  margin-bottom: 0.75em !important;
}

#kcwsensuft div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {
  height: 0px !important;
}
</style>

<table class="gt_table table table-sm table-striped small" data-quarto-postprocess="true" data-quarto-disable-processing="false" data-quarto-bootstrap="false">
<colgroup>
<col style="width: 14%">
<col style="width: 14%">
<col style="width: 14%">
<col style="width: 14%">
<col style="width: 14%">
<col style="width: 14%">
<col style="width: 14%">
</colgroup>
<thead>
<tr class="header gt_heading">
<th colspan="7" class="gt_heading gt_title gt_font_normal">World Value Survey (WVS)</th>
</tr>
<tr class="odd gt_heading">
<th colspan="7" class="gt_heading gt_subtitle gt_font_normal gt_bottom_border">Relationship Status by Gender and Country</th>
</tr>
<tr class="header gt_col_headings gt_spanner_row">
<th rowspan="2" id="country" class="gt_col_heading gt_columns_bottom_border gt_center" data-quarto-table-cell-role="th" scope="col">country</th>
<th colspan="3" id="spanner-female_married" class="gt_center gt_columns_top_border gt_column_spanner_outer" data-quarto-table-cell-role="th" scope="colgroup"><div class="gt_column_spanner">
female
</div></th>
<th colspan="3" id="spanner-male_married" class="gt_center gt_columns_top_border gt_column_spanner_outer" data-quarto-table-cell-role="th" scope="colgroup"><div class="gt_column_spanner">
male
</div></th>
</tr>
<tr class="odd gt_col_headings">
<th id="female_married" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">married</th>
<th id="female_separated" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">separated</th>
<th id="female_divorced" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">divorced</th>
<th id="male_married" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">married</th>
<th id="male_separated" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">separated</th>
<th id="male_divorced" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">divorced</th>
</tr>
</thead>
<tbody class="gt_table_body">
<tr class="odd">
<td class="gt_row gt_center" headers="country">Bolivia</td>
<td class="gt_row gt_right" headers="female_married">383</td>
<td class="gt_row gt_right" headers="female_separated">62</td>
<td class="gt_row gt_right" headers="female_divorced">27</td>
<td class="gt_row gt_right" headers="male_married">376</td>
<td class="gt_row gt_right" headers="male_separated">34</td>
<td class="gt_row gt_right" headers="male_divorced">24</td>
</tr>
<tr class="even">
<td class="gt_row gt_center" headers="country">Iran</td>
<td class="gt_row gt_right" headers="female_married">448</td>
<td class="gt_row gt_right" headers="female_separated">4</td>
<td class="gt_row gt_right" headers="female_divorced">24</td>
<td class="gt_row gt_right" headers="male_married">518</td>
<td class="gt_row gt_right" headers="male_separated">8</td>
<td class="gt_row gt_right" headers="male_divorced">6</td>
</tr>
<tr class="odd">
<td class="gt_row gt_center" headers="country">Iraq</td>
<td class="gt_row gt_right" headers="female_married">442</td>
<td class="gt_row gt_right" headers="female_separated">6</td>
<td class="gt_row gt_right" headers="female_divorced">10</td>
<td class="gt_row gt_right" headers="male_married">423</td>
<td class="gt_row gt_right" headers="male_separated">5</td>
<td class="gt_row gt_right" headers="male_divorced">9</td>
</tr>
<tr class="even">
<td class="gt_row gt_center" headers="country">Japan</td>
<td class="gt_row gt_right" headers="female_married">525</td>
<td class="gt_row gt_right" headers="female_separated">4</td>
<td class="gt_row gt_right" headers="female_divorced">49</td>
<td class="gt_row gt_right" headers="male_married">464</td>
<td class="gt_row gt_right" headers="male_separated">1</td>
<td class="gt_row gt_right" headers="male_divorced">20</td>
</tr>
<tr class="odd">
<td class="gt_row gt_center" headers="country">Korea</td>
<td class="gt_row gt_right" headers="female_married">491</td>
<td class="gt_row gt_right" headers="female_separated">1</td>
<td class="gt_row gt_right" headers="female_divorced">1</td>
<td class="gt_row gt_right" headers="male_married">407</td>
<td class="gt_row gt_right" headers="male_separated">NA</td>
<td class="gt_row gt_right" headers="male_divorced">7</td>
</tr>
<tr class="even">
<td class="gt_row gt_center" headers="country">Egypt</td>
<td class="gt_row gt_right" headers="female_married">399</td>
<td class="gt_row gt_right" headers="female_separated">10</td>
<td class="gt_row gt_right" headers="female_divorced">23</td>
<td class="gt_row gt_right" headers="male_married">434</td>
<td class="gt_row gt_right" headers="male_separated">7</td>
<td class="gt_row gt_right" headers="male_divorced">9</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><code>tab_spanner_delim()</code> is GT’s convenient function for automatically creating column groups. It looks at your column names, splits them at the delimiter you specify (in this case, the underscore), and creates grouped headers.</p>
<p>This creates the gender groupings automatically by splitting on the underscore. The part before the underscore becomes the group header (“female”, “male”), and the part after becomes the column label (“married”, “separated”, “divorced”).</p>
<p>It’s clean, it’s automatic, and it… doesn’t let you customise the subcategory labels. You’re stuck with “married”, “separated”, “divorced” exactly as they appear in your column names.</p>
<p>What if you want “Married” (capitalised), “Sep.” (abbreviated), or “Divorced/Separated” (combined)? What if you want to style them with bold or italic text? <code>tab_spanner_delim()</code> just shrugs and says “take it or leave it.”</p>
</section>
<section id="step-3-the-manual-labor-solution" class="level2">
<h2 class="anchored" data-anchor-id="step-3-the-manual-labor-solution">Step 3: The Manual Labor Solution</h2>
<p>This is where GT shows both its power and its complexity. To get full control, we need to manually create our spanners and relabel our columns. It’s more work, but it’s infinitely more flexible.</p>
<p>Let’s break this down step by step:</p>
<div class="cell slide-in">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The manual approach - more control, more code</span></span>
<span id="cb9-2">custom_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> wide_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gt</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tab_header</span>(</span>
<span id="cb9-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"World Value Survey (WVS)"</span>,</span>
<span id="cb9-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Data extract from r4np"</span></span>
<span id="cb9-7">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-8">  </span>
<span id="cb9-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 1: Create individual gender spanners</span></span>
<span id="cb9-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tab_spanner</span>(</span>
<span id="cb9-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">md</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*female*"</span>),</span>
<span id="cb9-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">columns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"female_"</span>)</span>
<span id="cb9-13">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tab_spanner</span>(</span>
<span id="cb9-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">md</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*male*"</span>), </span>
<span id="cb9-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">columns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"male_"</span>)</span>
<span id="cb9-17">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-18">  </span>
<span id="cb9-19">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 2: Create an overarching gender spanner</span></span>
<span id="cb9-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tab_spanner</span>(</span>
<span id="cb9-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">md</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"**Gender**"</span>),</span>
<span id="cb9-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">columns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"female_"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"male_"</span>)),</span>
<span id="cb9-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gender"</span></span>
<span id="cb9-24">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-25">  </span>
<span id="cb9-26">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 3: Customise individual column labels</span></span>
<span id="cb9-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cols_label</span>(</span>
<span id="cb9-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">country =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">md</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"**Country**"</span>),</span>
<span id="cb9-29">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ends_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"married"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Married"</span>,</span>
<span id="cb9-30">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ends_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"separated"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Separated"</span>, </span>
<span id="cb9-31">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ends_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"divorced"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Divorced"</span></span>
<span id="cb9-32">  )</span>
<span id="cb9-33"></span>
<span id="cb9-34">custom_table</span></code></pre></div>
<div class="cell-output-display">
<div id="mwkiyqhhud" style="padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;">
<style>#mwkiyqhhud table {
  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

#mwkiyqhhud thead, #mwkiyqhhud tbody, #mwkiyqhhud tfoot, #mwkiyqhhud tr, #mwkiyqhhud td, #mwkiyqhhud th {
  border-style: none;
}

#mwkiyqhhud p {
  margin: 0;
  padding: 0;
}

#mwkiyqhhud .gt_table {
  display: table;
  border-collapse: collapse;
  line-height: normal;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#mwkiyqhhud .gt_caption {
  padding-top: 4px;
  padding-bottom: 4px;
}

#mwkiyqhhud .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#mwkiyqhhud .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 3px;
  padding-bottom: 5px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#mwkiyqhhud .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#mwkiyqhhud .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#mwkiyqhhud .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#mwkiyqhhud .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#mwkiyqhhud .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#mwkiyqhhud .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#mwkiyqhhud .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#mwkiyqhhud .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 5px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#mwkiyqhhud .gt_spanner_row {
  border-bottom-style: hidden;
}

#mwkiyqhhud .gt_group_heading {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  text-align: left;
}

#mwkiyqhhud .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#mwkiyqhhud .gt_from_md > :first-child {
  margin-top: 0;
}

#mwkiyqhhud .gt_from_md > :last-child {
  margin-bottom: 0;
}

#mwkiyqhhud .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#mwkiyqhhud .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
}

#mwkiyqhhud .gt_stub_row_group {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
  vertical-align: top;
}

#mwkiyqhhud .gt_row_group_first td {
  border-top-width: 2px;
}

#mwkiyqhhud .gt_row_group_first th {
  border-top-width: 2px;
}

#mwkiyqhhud .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#mwkiyqhhud .gt_first_summary_row {
  border-top-style: solid;
  border-top-color: #D3D3D3;
}

#mwkiyqhhud .gt_first_summary_row.thick {
  border-top-width: 2px;
}

#mwkiyqhhud .gt_last_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#mwkiyqhhud .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#mwkiyqhhud .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#mwkiyqhhud .gt_last_grand_summary_row_top {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: double;
  border-bottom-width: 6px;
  border-bottom-color: #D3D3D3;
}

#mwkiyqhhud .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#mwkiyqhhud .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#mwkiyqhhud .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#mwkiyqhhud .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#mwkiyqhhud .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#mwkiyqhhud .gt_sourcenote {
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#mwkiyqhhud .gt_left {
  text-align: left;
}

#mwkiyqhhud .gt_center {
  text-align: center;
}

#mwkiyqhhud .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#mwkiyqhhud .gt_font_normal {
  font-weight: normal;
}

#mwkiyqhhud .gt_font_bold {
  font-weight: bold;
}

#mwkiyqhhud .gt_font_italic {
  font-style: italic;
}

#mwkiyqhhud .gt_super {
  font-size: 65%;
}

#mwkiyqhhud .gt_footnote_marks {
  font-size: 75%;
  vertical-align: 0.4em;
  position: initial;
}

#mwkiyqhhud .gt_asterisk {
  font-size: 100%;
  vertical-align: 0;
}

#mwkiyqhhud .gt_indent_1 {
  text-indent: 5px;
}

#mwkiyqhhud .gt_indent_2 {
  text-indent: 10px;
}

#mwkiyqhhud .gt_indent_3 {
  text-indent: 15px;
}

#mwkiyqhhud .gt_indent_4 {
  text-indent: 20px;
}

#mwkiyqhhud .gt_indent_5 {
  text-indent: 25px;
}

#mwkiyqhhud .katex-display {
  display: inline-flex !important;
  margin-bottom: 0.75em !important;
}

#mwkiyqhhud div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {
  height: 0px !important;
}
</style>

<table class="gt_table table table-sm table-striped small" data-quarto-postprocess="true" data-quarto-disable-processing="false" data-quarto-bootstrap="false">
<colgroup>
<col style="width: 14%">
<col style="width: 14%">
<col style="width: 14%">
<col style="width: 14%">
<col style="width: 14%">
<col style="width: 14%">
<col style="width: 14%">
</colgroup>
<thead>
<tr class="header gt_heading">
<th colspan="7" class="gt_heading gt_title gt_font_normal">World Value Survey (WVS)</th>
</tr>
<tr class="odd gt_heading">
<th colspan="7" class="gt_heading gt_subtitle gt_font_normal gt_bottom_border">Data extract from r4np</th>
</tr>
<tr class="header gt_col_headings gt_spanner_row">
<th class="gt_center gt_columns_top_border gt_column_spanner_outer" data-quarto-table-cell-role="th" scope="col"></th>
<th colspan="6" id="gender" class="gt_center gt_columns_top_border gt_column_spanner_outer" data-quarto-table-cell-role="th" scope="colgroup"><div class="gt_column_spanner">
<strong>Gender</strong>
</div></th>
</tr>
<tr class="odd gt_col_headings gt_spanner_row">
<th rowspan="2" id="country" class="gt_col_heading gt_columns_bottom_border gt_center" data-quarto-table-cell-role="th" scope="col"><strong>Country</strong></th>
<th colspan="3" id="*female*" class="gt_center gt_columns_top_border gt_column_spanner_outer" data-quarto-table-cell-role="th" scope="colgroup"><div class="gt_column_spanner">
<em>female</em>
</div></th>
<th colspan="3" id="*male*" class="gt_center gt_columns_top_border gt_column_spanner_outer" data-quarto-table-cell-role="th" scope="colgroup"><div class="gt_column_spanner">
<em>male</em>
</div></th>
</tr>
<tr class="header gt_col_headings">
<th id="female_married" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">Married</th>
<th id="female_separated" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">Separated</th>
<th id="female_divorced" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">Divorced</th>
<th id="male_married" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">Married</th>
<th id="male_separated" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">Separated</th>
<th id="male_divorced" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">Divorced</th>
</tr>
</thead>
<tbody class="gt_table_body">
<tr class="odd">
<td class="gt_row gt_center" headers="country">Bolivia</td>
<td class="gt_row gt_right" headers="female_married">383</td>
<td class="gt_row gt_right" headers="female_separated">62</td>
<td class="gt_row gt_right" headers="female_divorced">27</td>
<td class="gt_row gt_right" headers="male_married">376</td>
<td class="gt_row gt_right" headers="male_separated">34</td>
<td class="gt_row gt_right" headers="male_divorced">24</td>
</tr>
<tr class="even">
<td class="gt_row gt_center" headers="country">Iran</td>
<td class="gt_row gt_right" headers="female_married">448</td>
<td class="gt_row gt_right" headers="female_separated">4</td>
<td class="gt_row gt_right" headers="female_divorced">24</td>
<td class="gt_row gt_right" headers="male_married">518</td>
<td class="gt_row gt_right" headers="male_separated">8</td>
<td class="gt_row gt_right" headers="male_divorced">6</td>
</tr>
<tr class="odd">
<td class="gt_row gt_center" headers="country">Iraq</td>
<td class="gt_row gt_right" headers="female_married">442</td>
<td class="gt_row gt_right" headers="female_separated">6</td>
<td class="gt_row gt_right" headers="female_divorced">10</td>
<td class="gt_row gt_right" headers="male_married">423</td>
<td class="gt_row gt_right" headers="male_separated">5</td>
<td class="gt_row gt_right" headers="male_divorced">9</td>
</tr>
<tr class="even">
<td class="gt_row gt_center" headers="country">Japan</td>
<td class="gt_row gt_right" headers="female_married">525</td>
<td class="gt_row gt_right" headers="female_separated">4</td>
<td class="gt_row gt_right" headers="female_divorced">49</td>
<td class="gt_row gt_right" headers="male_married">464</td>
<td class="gt_row gt_right" headers="male_separated">1</td>
<td class="gt_row gt_right" headers="male_divorced">20</td>
</tr>
<tr class="odd">
<td class="gt_row gt_center" headers="country">Korea</td>
<td class="gt_row gt_right" headers="female_married">491</td>
<td class="gt_row gt_right" headers="female_separated">1</td>
<td class="gt_row gt_right" headers="female_divorced">1</td>
<td class="gt_row gt_right" headers="male_married">407</td>
<td class="gt_row gt_right" headers="male_separated">NA</td>
<td class="gt_row gt_right" headers="male_divorced">7</td>
</tr>
<tr class="even">
<td class="gt_row gt_center" headers="country">Egypt</td>
<td class="gt_row gt_right" headers="female_married">399</td>
<td class="gt_row gt_right" headers="female_separated">10</td>
<td class="gt_row gt_right" headers="female_divorced">23</td>
<td class="gt_row gt_right" headers="male_married">434</td>
<td class="gt_row gt_right" headers="male_separated">7</td>
<td class="gt_row gt_right" headers="male_divorced">9</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Let’s dissect what’s happening here:</p>
<p><strong>Step 1: Individual Gender Spanners</strong></p>
<div class="cell slide-in">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tab_spanner</span>(</span>
<span id="cb10-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">md</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*female*"</span>),</span>
<span id="cb10-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">columns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"female_"</span>)</span>
<span id="cb10-4">)</span></code></pre></div>
</div>
<p>This creates a spanner (column group) labeled “female” that covers all columns starting with “female_”. The <code>md()</code> function allows us to use markdown formatting – in this case, italics with the asterisks.</p>
<p>The <code>starts_with()</code> function is a “tidy select” helper that selects columns based on their names. It’s much more reliable than typing out column names manually, especially when your column names follow a pattern.</p>
<p><strong>Step 2: Overarching Spanner</strong></p>
<div class="cell slide-in">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tab_spanner</span>(</span>
<span id="cb11-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">md</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"**Gender**"</span>),</span>
<span id="cb11-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">columns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"female_"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"male_"</span>)),</span>
<span id="cb11-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gender"</span></span>
<span id="cb11-5">)</span></code></pre></div>
</div>
<p>This creates a higher-level spanner that encompasses both gender groups. The <code>columns</code> argument uses a vector of prefixes to select all columns that start with either “female_” or “male_”. The <code>id = "gender"</code> gives this spanner a unique identifier that we could reference later if needed.</p>
<p><strong>Step 3: Column Label Customisation</strong></p>
<div class="cell slide-in">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cols_label</span>(</span>
<span id="cb12-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">country =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">md</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"**Country**"</span>),</span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ends_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"married"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Married"</span>,</span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ends_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"separated"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Separated"</span>, </span>
<span id="cb12-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ends_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"divorced"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Divorced"</span></span>
<span id="cb12-6">)</span></code></pre></div>
</div>
<p>Here’s where the magic happens. <code>cols_label()</code> lets us rename columns, but it also supports conditional renaming using the <code>~</code> formula syntax.</p>
<ul>
<li><code>country = md("**Country**")</code>: Directly renames the country column</li>
<li><code>ends_with("married") ~ "Married"</code>: This says “for any column that ends with ‘married’, rename it to ‘Married’”</li>
</ul>
<p>This pattern-based renaming is incredibly powerful. Instead of writing:</p>
<div id="tbl-different-correlations" class="cell slide-in quarto-float anchored">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl quarto-uncaptioned" id="tbl-different-correlations-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;1
</figcaption>
<div aria-describedby="tbl-different-correlations-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="sourceCode cell-code anchored" id="tbl-different-correlations" style="background: #f1f3f5;"><pre class="sourceCode r cell slide-in code-with-copy"><code class="sourceCode r"><span id="tbl-different-correlations-1">female_married <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Married"</span>,</span>
<span id="tbl-different-correlations-2">male_married <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Married"</span>,</span>
<span id="tbl-different-correlations-3">female_separated <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Separated"</span>,</span>
<span id="tbl-different-correlations-4">male_separated <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Separated"</span></span>
<span id="tbl-different-correlations-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... and so on</span></span></code></pre></div>
</div>
</figure>
</div>
<p>We can use the formula syntax to apply the same transformation to multiple columns at once. The results is pretty respectable.</p>
</section>
<section id="step-4-the-na-problem-plot-twist" class="level2">
<h2 class="anchored" data-anchor-id="step-4-the-na-problem-plot-twist">Step 4: The NA Problem (Plot Twist!)</h2>
<p>But wait, there’s more! Let’s add a total column to show the sum across relationship statuses:</p>
<div class="cell slide-in">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adding totals - first attempt</span></span>
<span id="cb13-2">with_totals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> wide_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">total =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowSums</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(., <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>country))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gt</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... rest of our formatting code</span></span>
<span id="cb13-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cols_label</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">total =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">md</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"**Total**"</span>))</span>
<span id="cb13-7"></span>
<span id="cb13-8">with_totals</span></code></pre></div>
</div>
<p>Let’s break down that <code>mutate()</code> line: - <code>select(., -country)</code>: Selects all columns except <code>country</code> (the <code>.</code> refers to the current data frame) - <code>rowSums()</code>: Sums across columns for each row - <code>mutate(total = ...)</code>: Creates a new column called <code>total</code> with these row sums</p>
<p>You might notice some countries have suspiciously low totals or <code>NA</code> values. That’s because <code>rowSums()</code> doesn’t handle <code>NA</code> values the way you might expect – if any value in a row is <code>NA</code>, the entire sum becomes <code>NA</code>.</p>
<p>In our case, <code>NA</code> in the count data doesn’t mean “missing information” – it means “zero observations for this combination.” For example, if a country has no divorced males in the survey, that cell will be <code>NA</code>, but for our table purposes, we want to treat it as zero.</p>
</section>
<section id="step-5-the-na-solution" class="level2">
<h2 class="anchored" data-anchor-id="step-5-the-na-solution">Step 5: The NA Solution</h2>
<p>Let’s fix the NA problem properly:</p>
<div class="cell slide-in">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The NA fix</span></span>
<span id="cb14-2">clean_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> wide_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb14-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replace NA with 0 - this makes sense for count data</span></span>
<span id="cb14-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric), <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(.), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, .))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb14-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Now rowSums will work properly</span></span>
<span id="cb14-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">total =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowSums</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(., <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>country)))</span>
<span id="cb14-7"></span>
<span id="cb14-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(clean_data)</span></code></pre></div>
</div>
<p>This code introduces a powerful pattern:</p>
<p><strong><code>across()</code> for Multiple Column Operations</strong></p>
<div class="cell slide-in">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric), <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(.), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, .)))</span></code></pre></div>
</div>
<p><code>across()</code> is a function that applies the same transformation to multiple columns. Let’s break it down:</p>
<ul>
<li><code>where(is.numeric)</code>: Selects columns based on a condition – in this case, all numeric columns</li>
<li><code>~ if_else(is.na(.), 0, .)</code>: This is a formula (notice the <code>~</code>) that defines the transformation
<ul>
<li><code>is.na(.)</code>: Checks if the value is NA (the <code>.</code> represents each value)</li>
<li><code>if_else(condition, true_value, false_value)</code>: If the value is NA, replace with 0, otherwise keep the original value</li>
</ul></li>
</ul>
<p>This is much more efficient than writing separate <code>mutate()</code> statements for each column, and it’s robust – if you add more numeric columns later, they’ll automatically be included in the transformation.</p>
</section>
<section id="step-6-the-full-solution-explained" class="level2">
<h2 class="anchored" data-anchor-id="step-6-the-full-solution-explained">Step 6: The Full Solution Explained</h2>
<p>Now let’s put it all together with detailed explanations and a little bit of flair:</p>
<div class="cell slide-in">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Our final, polished table</span></span>
<span id="cb16-2">final_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> wvs_nona <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 1: Create counts for each combination</span></span>
<span id="cb16-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(gender, country, relationship_status) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-5">  </span>
<span id="cb16-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 2: Filter to our relationship statuses of interest</span></span>
<span id="cb16-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(relationship_status <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"married"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"separated"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"divorced"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-8">  </span>
<span id="cb16-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 3: Reshape from long to wide format</span></span>
<span id="cb16-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id_cols =</span> country,</span>
<span id="cb16-11">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_from =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(gender, relationship_status),</span>
<span id="cb16-12">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_from =</span> n) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-13">  </span>
<span id="cb16-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 4: Handle NAs properly for count data</span></span>
<span id="cb16-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric), <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(.), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, .))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-16">  </span>
<span id="cb16-17">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 5: Add row totals</span></span>
<span id="cb16-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">total =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowSums</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(., <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>country))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-19">  </span>
<span id="cb16-20">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 6: Create the GT table</span></span>
<span id="cb16-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gt</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-22">  </span>
<span id="cb16-23">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 7: Add headers</span></span>
<span id="cb16-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tab_header</span>(</span>
<span id="cb16-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"World Value Survey (WVS)"</span>,</span>
<span id="cb16-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Data extract from r4np"</span></span>
<span id="cb16-27">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-28">  </span>
<span id="cb16-29">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 8: Create nested column spanners</span></span>
<span id="cb16-30">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tab_spanner</span>(</span>
<span id="cb16-31">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">md</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*female*"</span>),</span>
<span id="cb16-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">columns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"female_"</span>)</span>
<span id="cb16-33">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-34">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tab_spanner</span>(</span>
<span id="cb16-35">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">md</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*male*"</span>),</span>
<span id="cb16-36">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">columns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"male_"</span>)</span>
<span id="cb16-37">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-38">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tab_spanner</span>(</span>
<span id="cb16-39">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">md</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"**Gender**"</span>),</span>
<span id="cb16-40">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">columns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"female_"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"male_"</span>)),</span>
<span id="cb16-41">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gender"</span></span>
<span id="cb16-42">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-43">  </span>
<span id="cb16-44">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 9: Customise column labels</span></span>
<span id="cb16-45">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cols_label</span>(</span>
<span id="cb16-46">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">country =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">md</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"**Country**"</span>),</span>
<span id="cb16-47">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">total =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">md</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"**Total**"</span>),</span>
<span id="cb16-48">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ends_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"married"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"married"</span>,</span>
<span id="cb16-49">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ends_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"separated"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"separated"</span>,</span>
<span id="cb16-50">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ends_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"divorced"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"divorced"</span></span>
<span id="cb16-51">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-52">  </span>
<span id="cb16-53">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 10: Add visual elements</span></span>
<span id="cb16-54">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gt_plt_bar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">column =</span> total) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-55">  </span>
<span id="cb16-56">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 11: Add footer information</span></span>
<span id="cb16-57">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tab_footnote</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">md</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"**Source:**&lt;br&gt;*World Value Survey (2024)*"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-58">  </span>
<span id="cb16-59">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 12: Apply a theme</span></span>
<span id="cb16-60">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gt_theme_espn</span>()</span>
<span id="cb16-61"></span>
<span id="cb16-62">final_table</span></code></pre></div>
</div>
<p>Admittedly, this code chunk is a lot more substantial than going with the standard <code>gt</code> table setup, but it certainly looks a lot more audience-ready and accessible</p>
<p>Let me explain the final formatting steps so you can apply those changes to your own tables as well:</p>
<p><strong>Visual Enhancement with <code>gt_plt_bar()</code></strong></p>
<div class="cell slide-in">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gt_plt_bar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">column =</span> total)</span></code></pre></div>
</div>
<p>This function from the <code>gtExtras</code> package adds mini bar charts to the total column. It automatically scales the bars based on the values in the column, making it easy to visually compare totals across countries. The bars appear within the table cells themselves.</p>
<p><strong>Footnotes for Attribution</strong></p>
<div class="cell slide-in">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tab_footnote</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">md</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"**Source: **&lt;br&gt;*World Value Survey (2024)*"</span>))</span></code></pre></div>
</div>
<p><code>tab_footnote()</code> adds a footnote to the table. The <code>&lt;br&gt;</code> is HTML for a line break, and again we’re using <code>md()</code> to enable markdown formatting for bold text and italics.</p>
<p><strong>Theming with <code>gt_theme_espn()</code></strong></p>
<div class="cell slide-in">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gt_theme_espn</span>()</span></code></pre></div>
</div>
<p>This applies a pre-built theme that mimics the ESPN sports network styling. The <code>gtExtras</code> package includes several pre-built themes that can dramatically change your table’s appearance with a single line of code. This is particularly helpful if you want to quickly apply a uniform style to all your tables in a presentation, report or publication.</p>
</section>
<section id="why-this-approach-works" class="level2">
<h2 class="anchored" data-anchor-id="why-this-approach-works">Why This Approach Works</h2>
<p>The manual approach we’ve taken here solves several problems:</p>
<ol type="1">
<li><strong>Flexibility</strong>: We can style each spanner and column label exactly how we want.</li>
<li><strong>Maintainability</strong>: The pattern-based selection (<code>starts_with()</code>, <code>ends_with()</code>) means our code will work even if column names change slightly.</li>
<li><strong>Scalability</strong>: If we add more countries or relationship statuses, most of the code will still work.</li>
<li><strong>Readability</strong>: Each step has a clear purpose and the code is self-documenting.</li>
</ol>
</section>
<section id="the-lessons-learned" class="level2">
<h2 class="anchored" data-anchor-id="the-lessons-learned">The Lessons Learned</h2>
<p>Creating multi-dimensional tables in <code>gt</code> teaches us several important concepts:</p>
<ol type="1">
<li><p><strong>Data shape matters</strong>: The structure of your data determines how easy it is to create your desired table. Sometimes reshaping is necessary.</p></li>
<li><p><strong>NA handling is context-dependent</strong>: In count data, NA often means zero, but in other contexts, it might mean something else entirely. Therefore, we might have to amend our table values as necessary.</p></li>
<li><p><strong>Pattern-based selection is powerful</strong>: Functions like <code>starts_with()</code>, <code>ends_with()</code>, and <code>where()</code> make your code more robust, concise and less prone to errors.</p></li>
<li><p><strong>The <code>~</code> formula syntax</strong>: This R feature appears in many places (<code>cols_label()</code>, <code>across()</code>, <code>ggplot2</code>) and is worth understanding deeply.</p></li>
<li><p><strong>Layered approach</strong>: <code>gt</code>’s philosophy of building tables layer by layer makes complex tables a lot more manageable.</p></li>
</ol>
<p>The GT package is incredibly powerful, but like any sophisticated tool, it rewards understanding its patterns and conventions. When your table needs go beyond the basics, don’t be afraid to break down the problem into smaller steps and build up your solution incrementally.</p>
</section>
<section id="want-to-learn-more" class="level2">
<h2 class="anchored" data-anchor-id="want-to-learn-more">Want to Learn More?</h2>
<ul>
<li><a href="https://gt.rstudio.com/">GT Package Documentation</a> - Comprehensive guide with examples</li>
<li><a href="https://jthomasmock.github.io/gtExtras/">GT Extras Package</a> - Additional functionality and themes</li>
<li><a href="https://r4np.com">R for Non-Programmers</a> - If you want to strengthen your R fundamentals</li>
</ul>
<p>The key to mastering <code>gt</code> (and R in general) is understanding the building blocks and how they combine. Once you grasp these patterns, you’ll find yourself creating publication-ready tables with confidence and in no time.</p>
<p>Happy table-making!</p>


</section>

 ]]></description>
  <category>R</category>
  <category>data visualisation</category>
  <category>gt</category>
  <category>tables</category>
  <guid>https://thesocialsciencesofa.com/blog/2025-06-30/multi-dimensional-gt-tables-r.html</guid>
  <pubDate>Sun, 29 Jun 2025 23:00:00 GMT</pubDate>
  <media:content url="https://thesocialsciencesofa.com/blog/2025-06-30/multi-dimensional-gt-tables-r.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
