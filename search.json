[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This is the personal academic space of Daniel — researcher, educator, and author of R for Non-Programmers."
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "Blog",
    "section": "",
    "text": "Beyond the Splash Screen: Customising Your RStudio Startup Experience\n\n\n\n\n\nTransform your RStudio startup from bland to brilliant with .Rprofile customisation. Learn how to add ASCII art, motivational quotes, colourful dashboards, and live weather updates — all without slowing down your workflow. This guide is fun, practical, and packed with code to personalise your R experience to your hearts content.\n\n\n\n\n\nJul 7, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nTaming Multi-Dimensional Tables with gt\n\n\n\n\n\nLearn how to create multi-dimensional tables in R using the GT package. This step-by-step tutorial covers the challenges of nested column headers, handling NA values in count data, and moving beyond tab_spanner_delim() for full customisation control. Perfect for R users wanting to create publication-ready tables with complex structures.\n\n\n\n\n\nJun 30, 2025\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "Welcome to The Social Science Sofa.\nExplore posts, tutorials, and musings from the social science world.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBeyond the Splash Screen: Customising Your RStudio Startup Experience\n\n\n\n\n\nTransform your RStudio startup from bland to brilliant with .Rprofile customisation. Learn how to add ASCII art, motivational quotes, colourful dashboards, and live weather updates — all without slowing down your workflow. This guide is fun, practical, and packed with code to personalise your R experience to your hearts content.\n\n\n\n\n\nJul 7, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nTaming Multi-Dimensional Tables with gt\n\n\n\n\n\nLearn how to create multi-dimensional tables in R using the GT package. This step-by-step tutorial covers the challenges of nested column headers, handling NA values in count data, and moving beyond tab_spanner_delim() for full customisation control. Perfect for R users wanting to create publication-ready tables with complex structures.\n\n\n\n\n\nJun 30, 2025\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog/2025-06-30/multi-dimensional-gt-tables-r.html",
    "href": "blog/2025-06-30/multi-dimensional-gt-tables-r.html",
    "title": "Taming Multi-Dimensional Tables with gt",
    "section": "",
    "text": "Creating beautiful tables in R has never been easier thanks to the gt package. But what happens when your “simple” table suddenly needs three dimensions? That’s when things get interesting – and by interesting, I mean frustratingly complex.\nToday, we’ll walk through creating a multi-dimensional table that displays relationship status by gender across different countries. We’ll start simple and work our way up to the challenges that make you question your life choices (and then solve them, of course)."
  },
  {
    "objectID": "blog/2025-06-30/multi-dimensional-gt-tables-r.html#meet-the-gt-package",
    "href": "blog/2025-06-30/multi-dimensional-gt-tables-r.html#meet-the-gt-package",
    "title": "Taming Multi-Dimensional Tables with gt",
    "section": "Meet the GT Package",
    "text": "Meet the GT Package\nThe gt package by RStudio is a grammar of tables that makes creating publication-ready tables surprisingly enjoyable. Think of it as ggplot2 for tables – it’s structured, flexible, and produces gorgeous output with relatively little code.\nThe package follows a layered approach: you start with your data, create a basic gt() object, then add layers of formatting, styling, and functionality. Each function adds a specific element to your table, making the code readable and the process intuitive.\nIf you’re new to R or finding this tutorial challenging to follow, I’d recommend checking out R for Non-Programmers for a more gentle introduction to R fundamentals."
  },
  {
    "objectID": "blog/2025-06-30/multi-dimensional-gt-tables-r.html#our-data-world-values-survey",
    "href": "blog/2025-06-30/multi-dimensional-gt-tables-r.html#our-data-world-values-survey",
    "title": "Taming Multi-Dimensional Tables with gt",
    "section": "Our Data: World Values Survey",
    "text": "Our Data: World Values Survey\nWe’ll be working with data from the World Values Survey (WVS), which contains responses from people across different countries about their values and demographics. The wvs_nona dataset is a cleaned version where missing values have been removed (hence “nona” = no NAs).\nIf you want to follow along, you can get the dataset from the r4np package:\n\n# Install if you haven't already\n# install.packages(\"r4np\")\nlibrary(tidyverse)\nlibrary(gt)\nlibrary(gtExtras)\nlibrary(r4np)\n\n# The dataset we'll use\nhead(wvs_nona)\n\n# A tibble: 6 × 6\n  country gender   age relationship_status freedom_of_choice satisfaction\n  &lt;fct&gt;   &lt;fct&gt;  &lt;dbl&gt; &lt;fct&gt;                           &lt;dbl&gt;        &lt;dbl&gt;\n1 Bolivia male      60 married                             7            5\n2 Bolivia male      40 married                             8            7\n3 Bolivia male      25 single                             10            8\n4 Bolivia female    71 widowed                             5            5\n5 Bolivia female    38 married                             5            7\n6 Bolivia female    20 separated                           5            3\n\n\nOur goal is to create a table showing the relationship between three variables: country, gender, and relationship_status. This is what makes it “multi-dimensional” – we’re not just showing a simple two-way relationship, but a three-way interaction."
  },
  {
    "objectID": "blog/2025-06-30/multi-dimensional-gt-tables-r.html#step-1-the-innocent-beginning",
    "href": "blog/2025-06-30/multi-dimensional-gt-tables-r.html#step-1-the-innocent-beginning",
    "title": "Taming Multi-Dimensional Tables with gt",
    "section": "Step 1: The Innocent Beginning",
    "text": "Step 1: The Innocent Beginning\nLet’s start with what seems like a straightforward task: create a table showing the count of married, separated, and divorced people by gender across countries.\nFirst, we need to count the combinations of our three variables:\n\n# Create our base data\ntable_data &lt;- wvs_nona %&gt;%\n  count(gender, country, relationship_status) %&gt;%\n  filter(relationship_status %in% c(\"married\", \"separated\", \"divorced\"))\n\n# Take a peek\nhead(table_data)\n\n# A tibble: 6 × 4\n  gender country relationship_status     n\n  &lt;fct&gt;  &lt;fct&gt;   &lt;fct&gt;               &lt;int&gt;\n1 female Bolivia married               383\n2 female Bolivia separated              62\n3 female Bolivia divorced               27\n4 female Iran    married               448\n5 female Iran    separated               4\n6 female Iran    divorced               24\n\n\nThe count() function is doing the heavy lifting here. It groups by the three variables we specify and counts how many observations fall into each combination. The filter() step narrows our focus to just three relationship statuses – we’re keeping the analysis manageable.\nThis gives us a “long” format dataset where each row represents one combination of country, gender, and relationship status, with the count in the n column.\nNow we need to reshape this data to make it suitable for a table. We want countries as rows and the gender-relationship combinations as columns:\n\n# Reshape for table format\nwide_data &lt;- table_data %&gt;%\n  pivot_wider(id_cols = country,\n              names_from = c(gender, relationship_status),\n              values_from = n)\n\nhead(wide_data)\n\n# A tibble: 6 × 7\n  country female_married female_separated female_divorced male_married\n  &lt;fct&gt;            &lt;int&gt;            &lt;int&gt;           &lt;int&gt;        &lt;int&gt;\n1 Bolivia            383               62              27          376\n2 Iran               448                4              24          518\n3 Iraq               442                6              10          423\n4 Japan              525                4              49          464\n5 Korea              491                1               1          407\n6 Egypt              399               10              23          434\n# ℹ 2 more variables: male_separated &lt;int&gt;, male_divorced &lt;int&gt;\n\n\npivot_wider() is the magic function here. Let’s break down what each argument does:\n\nid_cols = country: This tells R that country should remain as a column (our row identifier)\nnames_from = c(gender, relationship_status): These two variables will become column names\nvalues_from = n: The values that fill the table come from the n column (our counts)\n\nThe result is columns with names like female_married, male_divorced, etc. R automatically combines the values from gender and relationship_status with an underscore.\nNow let’s create our first GT table:\n\n# Our first attempt\nbasic_table &lt;- wide_data %&gt;%\n  gt() %&gt;%\n  tab_header(\n    title = \"World Value Survey (WVS)\",\n    subtitle = \"Relationship Status by Gender and Country\"\n  )\n\nbasic_table\n\n\n\n\n\n\n\nWorld Value Survey (WVS)\n\n\nRelationship Status by Gender and Country\n\n\ncountry\nfemale_married\nfemale_separated\nfemale_divorced\nmale_married\nmale_separated\nmale_divorced\n\n\n\n\nBolivia\n383\n62\n27\n376\n34\n24\n\n\nIran\n448\n4\n24\n518\n8\n6\n\n\nIraq\n442\n6\n10\n423\n5\n9\n\n\nJapan\n525\n4\n49\n464\n1\n20\n\n\nKorea\n491\n1\n1\n407\nNA\n7\n\n\nEgypt\n399\n10\n23\n434\n7\n9\n\n\n\n\n\n\n\nThe gt() function creates the basic table object, and tab_header() adds a title and subtitle. Simple enough, but not very pretty."
  },
  {
    "objectID": "blog/2025-06-30/multi-dimensional-gt-tables-r.html#step-2-the-plot-thickens",
    "href": "blog/2025-06-30/multi-dimensional-gt-tables-r.html#step-2-the-plot-thickens",
    "title": "Taming Multi-Dimensional Tables with gt",
    "section": "Step 2: The Plot Thickens",
    "text": "Step 2: The Plot Thickens\nOur basic table works, but it’s not exactly reader-friendly. Those column names like female_married are functional but ugly. We want to group them under gender headers with clean sub-labels.\n“No problem,” you think, “I’ll just use tab_spanner_delim()!”\n\n# Attempt with tab_spanner_delim()\nspanners_attempt &lt;- wide_data %&gt;%\n  gt() %&gt;%\n  tab_header(\n    title = \"World Value Survey (WVS)\",\n    subtitle = \"Relationship Status by Gender and Country\"  \n  ) %&gt;%\n  tab_spanner_delim(delim = \"_\")\n\nspanners_attempt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWorld Value Survey (WVS)\n\n\nRelationship Status by Gender and Country\n\n\ncountry\n\nfemale\n\n\nmale\n\n\n\nmarried\nseparated\ndivorced\nmarried\nseparated\ndivorced\n\n\n\n\nBolivia\n383\n62\n27\n376\n34\n24\n\n\nIran\n448\n4\n24\n518\n8\n6\n\n\nIraq\n442\n6\n10\n423\n5\n9\n\n\nJapan\n525\n4\n49\n464\n1\n20\n\n\nKorea\n491\n1\n1\n407\nNA\n7\n\n\nEgypt\n399\n10\n23\n434\n7\n9\n\n\n\n\n\n\n\ntab_spanner_delim() is GT’s convenient function for automatically creating column groups. It looks at your column names, splits them at the delimiter you specify (in this case, the underscore), and creates grouped headers.\nThis creates the gender groupings automatically by splitting on the underscore. The part before the underscore becomes the group header (“female”, “male”), and the part after becomes the column label (“married”, “separated”, “divorced”).\nIt’s clean, it’s automatic, and it… doesn’t let you customise the subcategory labels. You’re stuck with “married”, “separated”, “divorced” exactly as they appear in your column names.\nWhat if you want “Married” (capitalised), “Sep.” (abbreviated), or “Divorced/Separated” (combined)? What if you want to style them with bold or italic text? tab_spanner_delim() just shrugs and says “take it or leave it.”"
  },
  {
    "objectID": "blog/2025-06-30/multi-dimensional-gt-tables-r.html#step-3-the-manual-labor-solution",
    "href": "blog/2025-06-30/multi-dimensional-gt-tables-r.html#step-3-the-manual-labor-solution",
    "title": "Taming Multi-Dimensional Tables with gt",
    "section": "Step 3: The Manual Labor Solution",
    "text": "Step 3: The Manual Labor Solution\nThis is where GT shows both its power and its complexity. To get full control, we need to manually create our spanners and relabel our columns. It’s more work, but it’s infinitely more flexible.\nLet’s break this down step by step:\n\n# The manual approach - more control, more code\ncustom_table &lt;- wide_data %&gt;%\n  gt() %&gt;%\n  tab_header(\n    title = \"World Value Survey (WVS)\",\n    subtitle = \"Data extract from r4np\"\n  ) %&gt;%\n  \n  # Step 1: Create individual gender spanners\n  tab_spanner(\n    label = md(\"*female*\"),\n    columns = starts_with(\"female_\")\n  ) %&gt;%\n  tab_spanner(\n    label = md(\"*male*\"), \n    columns = starts_with(\"male_\")\n  ) %&gt;%\n  \n  # Step 2: Create an overarching gender spanner\n  tab_spanner(\n    label = md(\"**Gender**\"),\n    columns = starts_with(c(\"female_\", \"male_\")),\n    id = \"gender\"\n  ) %&gt;%\n  \n  # Step 3: Customise individual column labels\n  cols_label(\n    country = md(\"**Country**\"),\n    ends_with(\"married\") ~ \"Married\",\n    ends_with(\"separated\") ~ \"Separated\", \n    ends_with(\"divorced\") ~ \"Divorced\"\n  )\n\ncustom_table\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWorld Value Survey (WVS)\n\n\nData extract from r4np\n\n\n\n\nGender\n\n\n\nCountry\n\nfemale\n\n\nmale\n\n\n\nMarried\nSeparated\nDivorced\nMarried\nSeparated\nDivorced\n\n\n\n\nBolivia\n383\n62\n27\n376\n34\n24\n\n\nIran\n448\n4\n24\n518\n8\n6\n\n\nIraq\n442\n6\n10\n423\n5\n9\n\n\nJapan\n525\n4\n49\n464\n1\n20\n\n\nKorea\n491\n1\n1\n407\nNA\n7\n\n\nEgypt\n399\n10\n23\n434\n7\n9\n\n\n\n\n\n\n\nLet’s dissect what’s happening here:\nStep 1: Individual Gender Spanners\n\ntab_spanner(\n  label = md(\"*female*\"),\n  columns = starts_with(\"female_\")\n)\n\nThis creates a spanner (column group) labeled “female” that covers all columns starting with “female_”. The md() function allows us to use markdown formatting – in this case, italics with the asterisks.\nThe starts_with() function is a “tidy select” helper that selects columns based on their names. It’s much more reliable than typing out column names manually, especially when your column names follow a pattern.\nStep 2: Overarching Spanner\n\ntab_spanner(\n  label = md(\"**Gender**\"),\n  columns = starts_with(c(\"female_\", \"male_\")),\n  id = \"gender\"\n)\n\nThis creates a higher-level spanner that encompasses both gender groups. The columns argument uses a vector of prefixes to select all columns that start with either “female_” or “male_”. The id = \"gender\" gives this spanner a unique identifier that we could reference later if needed.\nStep 3: Column Label Customisation\n\ncols_label(\n  country = md(\"**Country**\"),\n  ends_with(\"married\") ~ \"Married\",\n  ends_with(\"separated\") ~ \"Separated\", \n  ends_with(\"divorced\") ~ \"Divorced\"\n)\n\nHere’s where the magic happens. cols_label() lets us rename columns, but it also supports conditional renaming using the ~ formula syntax.\n\ncountry = md(\"**Country**\"): Directly renames the country column\nends_with(\"married\") ~ \"Married\": This says “for any column that ends with ‘married’, rename it to ‘Married’”\n\nThis pattern-based renaming is incredibly powerful. Instead of writing:\n\n\n\nTable 1\n\n\nfemale_married = \"Married\",\nmale_married = \"Married\",\nfemale_separated = \"Separated\",\nmale_separated = \"Separated\"\n# ... and so on\n\n\n\nWe can use the formula syntax to apply the same transformation to multiple columns at once. The results is pretty respectable."
  },
  {
    "objectID": "blog/2025-06-30/multi-dimensional-gt-tables-r.html#step-4-the-na-problem-plot-twist",
    "href": "blog/2025-06-30/multi-dimensional-gt-tables-r.html#step-4-the-na-problem-plot-twist",
    "title": "Taming Multi-Dimensional Tables with gt",
    "section": "Step 4: The NA Problem (Plot Twist!)",
    "text": "Step 4: The NA Problem (Plot Twist!)\nBut wait, there’s more! Let’s add a total column to show the sum across relationship statuses:\n\n# Adding totals - first attempt\nwith_totals &lt;- wide_data %&gt;%\n  mutate(total = rowSums(select(., -country))) %&gt;%\n  gt() %&gt;%\n  # ... rest of our formatting code\n  cols_label(total = md(\"**Total**\"))\n\nwith_totals\n\nLet’s break down that mutate() line: - select(., -country): Selects all columns except country (the . refers to the current data frame) - rowSums(): Sums across columns for each row - mutate(total = ...): Creates a new column called total with these row sums\nYou might notice some countries have suspiciously low totals or NA values. That’s because rowSums() doesn’t handle NA values the way you might expect – if any value in a row is NA, the entire sum becomes NA.\nIn our case, NA in the count data doesn’t mean “missing information” – it means “zero observations for this combination.” For example, if a country has no divorced males in the survey, that cell will be NA, but for our table purposes, we want to treat it as zero."
  },
  {
    "objectID": "blog/2025-06-30/multi-dimensional-gt-tables-r.html#step-5-the-na-solution",
    "href": "blog/2025-06-30/multi-dimensional-gt-tables-r.html#step-5-the-na-solution",
    "title": "Taming Multi-Dimensional Tables with gt",
    "section": "Step 5: The NA Solution",
    "text": "Step 5: The NA Solution\nLet’s fix the NA problem properly:\n\n# The NA fix\nclean_data &lt;- wide_data %&gt;%\n  # Replace NA with 0 - this makes sense for count data\n  mutate(across(where(is.numeric), ~ if_else(is.na(.), 0, .))) %&gt;%\n  # Now rowSums will work properly\n  mutate(total = rowSums(select(., -country)))\n\nhead(clean_data)\n\nThis code introduces a powerful pattern:\nacross() for Multiple Column Operations\n\nmutate(across(where(is.numeric), ~ if_else(is.na(.), 0, .)))\n\nacross() is a function that applies the same transformation to multiple columns. Let’s break it down:\n\nwhere(is.numeric): Selects columns based on a condition – in this case, all numeric columns\n~ if_else(is.na(.), 0, .): This is a formula (notice the ~) that defines the transformation\n\nis.na(.): Checks if the value is NA (the . represents each value)\nif_else(condition, true_value, false_value): If the value is NA, replace with 0, otherwise keep the original value\n\n\nThis is much more efficient than writing separate mutate() statements for each column, and it’s robust – if you add more numeric columns later, they’ll automatically be included in the transformation."
  },
  {
    "objectID": "blog/2025-06-30/multi-dimensional-gt-tables-r.html#step-6-the-full-solution-explained",
    "href": "blog/2025-06-30/multi-dimensional-gt-tables-r.html#step-6-the-full-solution-explained",
    "title": "Taming Multi-Dimensional Tables with gt",
    "section": "Step 6: The Full Solution Explained",
    "text": "Step 6: The Full Solution Explained\nNow let’s put it all together with detailed explanations and a little bit of flair:\n\n# Our final, polished table\nfinal_table &lt;- wvs_nona %&gt;%\n  # Step 1: Create counts for each combination\n  count(gender, country, relationship_status) %&gt;%\n  \n  # Step 2: Filter to our relationship statuses of interest\n  filter(relationship_status %in% c(\"married\", \"separated\", \"divorced\")) %&gt;%\n  \n  # Step 3: Reshape from long to wide format\n  pivot_wider(id_cols = country,\n              names_from = c(gender, relationship_status),\n              values_from = n) %&gt;%\n  \n  # Step 4: Handle NAs properly for count data\n  mutate(across(where(is.numeric), ~ if_else(is.na(.), 0, .))) %&gt;%\n  \n  # Step 5: Add row totals\n  mutate(total = rowSums(select(., -country))) %&gt;%\n  \n  # Step 6: Create the GT table\n  gt() %&gt;%\n  \n  # Step 7: Add headers\n  tab_header(\n    title = \"World Value Survey (WVS)\",\n    subtitle = \"Data extract from r4np\"\n  ) %&gt;%\n  \n  # Step 8: Create nested column spanners\n  tab_spanner(\n    label = md(\"*female*\"),\n    columns = starts_with(\"female_\")\n  ) %&gt;%\n  tab_spanner(\n    label = md(\"*male*\"),\n    columns = starts_with(\"male_\")\n  ) %&gt;%\n  tab_spanner(\n    label = md(\"**Gender**\"),\n    columns = starts_with(c(\"female_\", \"male_\")),\n    id = \"gender\"\n  ) %&gt;%\n  \n  # Step 9: Customise column labels\n  cols_label(\n    country = md(\"**Country**\"),\n    total = md(\"**Total**\"),\n    ends_with(\"married\") ~ \"married\",\n    ends_with(\"separated\") ~ \"separated\",\n    ends_with(\"divorced\") ~ \"divorced\"\n  ) %&gt;%\n  \n  # Step 10: Add visual elements\n  gt_plt_bar(column = total) %&gt;%\n  \n  # Step 11: Add footer information\n  tab_footnote(md(\"**Source:**&lt;br&gt;*World Value Survey (2024)*\")) %&gt;%\n  \n  # Step 12: Apply a theme\n  gt_theme_espn()\n\nfinal_table\n\nAdmittedly, this code chunk is a lot more substantial than going with the standard gt table setup, but it certainly looks a lot more audience-ready and accessible\nLet me explain the final formatting steps so you can apply those changes to your own tables as well:\nVisual Enhancement with gt_plt_bar()\n\ngt_plt_bar(column = total)\n\nThis function from the gtExtras package adds mini bar charts to the total column. It automatically scales the bars based on the values in the column, making it easy to visually compare totals across countries. The bars appear within the table cells themselves.\nFootnotes for Attribution\n\ntab_footnote(md(\"**Source: **&lt;br&gt;*World Value Survey (2024)*\"))\n\ntab_footnote() adds a footnote to the table. The &lt;br&gt; is HTML for a line break, and again we’re using md() to enable markdown formatting for bold text and italics.\nTheming with gt_theme_espn()\n\ngt_theme_espn()\n\nThis applies a pre-built theme that mimics the ESPN sports network styling. The gtExtras package includes several pre-built themes that can dramatically change your table’s appearance with a single line of code. This is particularly helpful if you want to quickly apply a uniform style to all your tables in a presentation, report or publication."
  },
  {
    "objectID": "blog/2025-06-30/multi-dimensional-gt-tables-r.html#why-this-approach-works",
    "href": "blog/2025-06-30/multi-dimensional-gt-tables-r.html#why-this-approach-works",
    "title": "Taming Multi-Dimensional Tables with gt",
    "section": "Why This Approach Works",
    "text": "Why This Approach Works\nThe manual approach we’ve taken here solves several problems:\n\nFlexibility: We can style each spanner and column label exactly how we want.\nMaintainability: The pattern-based selection (starts_with(), ends_with()) means our code will work even if column names change slightly.\nScalability: If we add more countries or relationship statuses, most of the code will still work.\nReadability: Each step has a clear purpose and the code is self-documenting."
  },
  {
    "objectID": "blog/2025-06-30/multi-dimensional-gt-tables-r.html#the-lessons-learned",
    "href": "blog/2025-06-30/multi-dimensional-gt-tables-r.html#the-lessons-learned",
    "title": "Taming Multi-Dimensional Tables with gt",
    "section": "The Lessons Learned",
    "text": "The Lessons Learned\nCreating multi-dimensional tables in gt teaches us several important concepts:\n\nData shape matters: The structure of your data determines how easy it is to create your desired table. Sometimes reshaping is necessary.\nNA handling is context-dependent: In count data, NA often means zero, but in other contexts, it might mean something else entirely. Therefore, we might have to amend our table values as necessary.\nPattern-based selection is powerful: Functions like starts_with(), ends_with(), and where() make your code more robust, concise and less prone to errors.\nThe ~ formula syntax: This R feature appears in many places (cols_label(), across(), ggplot2) and is worth understanding deeply.\nLayered approach: gt’s philosophy of building tables layer by layer makes complex tables a lot more manageable.\n\nThe GT package is incredibly powerful, but like any sophisticated tool, it rewards understanding its patterns and conventions. When your table needs go beyond the basics, don’t be afraid to break down the problem into smaller steps and build up your solution incrementally."
  },
  {
    "objectID": "blog/2025-06-30/multi-dimensional-gt-tables-r.html#want-to-learn-more",
    "href": "blog/2025-06-30/multi-dimensional-gt-tables-r.html#want-to-learn-more",
    "title": "Taming Multi-Dimensional Tables with gt",
    "section": "Want to Learn More?",
    "text": "Want to Learn More?\n\nGT Package Documentation - Comprehensive guide with examples\nGT Extras Package - Additional functionality and themes\nR for Non-Programmers - If you want to strengthen your R fundamentals\n\nThe key to mastering gt (and R in general) is understanding the building blocks and how they combine. Once you grasp these patterns, you’ll find yourself creating publication-ready tables with confidence and in no time.\nHappy table-making!"
  },
  {
    "objectID": "blog/2025-07-07/rprofile_customisation.html",
    "href": "blog/2025-07-07/rprofile_customisation.html",
    "title": "Beyond the Splash Screen: Customising Your RStudio Startup Experience",
    "section": "",
    "text": "Picture this: It is 9 am on a Monday morning. You are clutching your third cup of coffee, staring at your screen with the grim determination of someone about to wrangle a particularly unruly dataset. You double-click RStudio, and… yawn… the same old splash screen appears. Again. For the 1,247th time this year.\nWhat if I told you that startup moment could be transformed from mundane to magical? What if, instead of that generic loading screen, you could be greeted by ASCII art masterpieces, live weather updates, or daily doses of inspiration? What if your R session could start with the digital equivalent of a warm hug and a gentle “you’ve got this” whisper?\nToday, we are diving deep into the wonderful world of .Rprofile customisation – a journey that will not make you a better analyst (sorry!), but will absolutely make your daily R experience more delightful. And let us be honest, in a world where we spend half our lives debugging code or trying to understand why our regressions do not approve of our hypotheses, we need all the delight we can get."
  },
  {
    "objectID": "blog/2025-07-07/rprofile_customisation.html#the-quick-start-guide-for-those-with-little-time",
    "href": "blog/2025-07-07/rprofile_customisation.html#the-quick-start-guide-for-those-with-little-time",
    "title": "Beyond the Splash Screen: Customising Your RStudio Startup Experience",
    "section": "The Quick Start Guide for Those With Little Time",
    "text": "The Quick Start Guide for Those With Little Time\nBefore we embark on this grand adventure, let us get you up and running with something simple and quick. Here is how to get started in less than two minutes:\n\nStep 1: Find Your .Rprofile\nThe .Rprofile file is like your home’s welcome mat, but for R. It lives in your home directory and is invisible by default (hence the mysterious dot).\nIn RStudio, run this command to open your .Rprofile:\n\nusethis::edit_r_profile()\n\n\n\nStep 2: Add Your First customisation\nCopy and paste this magical incantation into your .Rprofile:\n\n# The secret sauce for RStudio customisation\nsetHook(\"rstudio.sessionInit\", function(newSession) {\n  \n  # Clear the console for a fresh start\n  cat(\"\\014\")\n  \n  # Your first personalised message\n  message(\"Welcome back, data wizard! ✨\")\n  message(\"Today's forecast: 100% chance of insights!\")\n  },\n  action = \"append\")\n\n\n\nStep 3: Restart and Marvel\nSave the file, restart RStudio, and watch the magic happen. You have just taken your first step into a larger world of customisation possibilities. If all you want is a custom message, this does the trick. If you want something more intriguing and exciting, then read on.\nThe Technical Bit: Everything that follows in this post should go between those curly braces where you see the messages. The setHook(\"rstudio.sessionInit\", ...) {...} wrapper is the key that makes everything work in RStudio. It is like telling RStudio “hey, run this code every time you start up.” I will show you the inner code for clarity, but remember to wrap it in the setHook() structure. In short: You always start from this template:\n\nsetHook(\"rstudio.sessionInit\", function(newSession) {\n  \n  # Put your custom .Rprofile code chunk here\n  # to customise your startup experience of RStudio.\n\n    },\n  action = \"append\")"
  },
  {
    "objectID": "blog/2025-07-07/rprofile_customisation.html#understanding-the-.rprofile-document",
    "href": "blog/2025-07-07/rprofile_customisation.html#understanding-the-.rprofile-document",
    "title": "Beyond the Splash Screen: Customising Your RStudio Startup Experience",
    "section": "Understanding the .Rprofile document",
    "text": "Understanding the .Rprofile document\nThink of .Rprofile as your personal R butler – the kind that remembers exactly how you like your workspace arranged and greets you with a knowing nod every morning. This file contains R code that runs automatically when R starts, allowing you to set up your digital domain exactly how you like it.\nBut here is where it gets interesting: regular .Rprofile tricks work fine in base R, but RStudio is a different beast entirely. The setHook() function is your secret weapon for RStudio customisation. It is like having a backstage pass to RStudio’s startup sequence.\nThe beauty of this approach is that it is completely non-destructive. If you mess something up, just delete the problematic code and restart. No harm, no foul, no need to reinstall anything.\nLet us look at some customisation options that might fit your bill."
  },
  {
    "objectID": "blog/2025-07-07/rprofile_customisation.html#the-minimalists-approach-simple-clean-and-fast",
    "href": "blog/2025-07-07/rprofile_customisation.html#the-minimalists-approach-simple-clean-and-fast",
    "title": "Beyond the Splash Screen: Customising Your RStudio Startup Experience",
    "section": "The Minimalist’s Approach: Simple, clean and fast",
    "text": "The Minimalist’s Approach: Simple, clean and fast\nLet us begin with the zen of startup customisation. Sometimes, the most powerful thing you can do is…nothing. Well, almost nothing.\n\n# The art of digital minimalism\ncat(\"\\014\")\n\nThis single line clears your console, giving you a pristine workspace to begin your analytical adventures. It might seem trivial – after all, it is just one keystroke saved. However, there is something deeply satisfying about starting with a clean slate.\nI assume that this saves me approximately 0.5 seconds per RStudio session. Assuming I only restart an R Session once each day (very unlikely), over a year, that is roughly 3 minutes of my life back. Will this 3 minutes change the world? Probably not. Will it give me a tiny hit of dopamine every morning? Absolutely.\nBut more importantly, it is a statement. It says, “I care about my digital environment enough to make it exactly how I want it.” And that, my friend, is the first step toward true customisation mastery."
  },
  {
    "objectID": "blog/2025-07-07/rprofile_customisation.html#the-art-of-digital-hospitality-crafting-your-welcome-message",
    "href": "blog/2025-07-07/rprofile_customisation.html#the-art-of-digital-hospitality-crafting-your-welcome-message",
    "title": "Beyond the Splash Screen: Customising Your RStudio Startup Experience",
    "section": "The Art of Digital Hospitality: Crafting Your Welcome Message",
    "text": "The Art of Digital Hospitality: Crafting Your Welcome Message\nNow that you have mastered the zen of console clearing, let us add some personality to your startup routine. Custom messages are where the real fun begins – it is like having a conversation with your computer, except your computer actually says something encouraging for once. The below code is what I use for several years now. A bit boring for some, but plenty for me.\n\n# Clear the console\ncat(\"\\014\")\n\n# Display a welcome message\nmessage(\"Here we go again! 👨‍💻\")\n\n\n\n\nThe message() function is perfect for this because it is specifically designed for informational output. Unlike print() or cat(), it has a certain gravitas – it is the difference between whispering and speaking with conviction.\nBut why stop at generic encouragement? This is your chance to inject some personality into your R sessions. Maybe you are the type who needs a gentle reminder that correlation does not imply causation. Perhaps you are working on a specific project and need daily motivation to finish that analysis. Or maybe you just want to remind yourself that you are awesome at what you do.\nThe key is making it personal. After all, you are the only one who will see this message (and maybe your students/colleagues), so make it count."
  },
  {
    "objectID": "blog/2025-07-07/rprofile_customisation.html#the-canvas-of-code-ascii-art-adventures",
    "href": "blog/2025-07-07/rprofile_customisation.html#the-canvas-of-code-ascii-art-adventures",
    "title": "Beyond the Splash Screen: Customising Your RStudio Startup Experience",
    "section": "The Canvas of Code: ASCII Art Adventures",
    "text": "The Canvas of Code: ASCII Art Adventures\nHere is where we throw caution to the wind and embrace our inner artist. ASCII art might seem frivolous, but there is something wonderfully subversive about turning your serious data analysis environment into a canvas for creative expression.\nLet us start with something appropriately R-themed:\n\ncat(\"\\014\")\n\n# ASCII art R logo\nr_logo &lt;- \"\n  ██████╗\n  ██╔══██╗\n  ██████╔╝\n  ██╔══██╗\n  ██║  ██║\n  ╚═╝  ╚═╝\n\"\n\ncat(r_logo)\n\nmessage(\"Welcome to the R universe! 🚀\")\nmessage(\"Time to wrangle some data!\")\n\n\n\n\nThe cat() function is your ASCII art best friend because it prints text exactly as you have formatted it. No automatic line breaks, no unwanted spacing – just pure, unadulterated artistic expression.\nBut why stop at simple logos when you can create entire startup experiences? For those brave enough to venture into the realm of epic ASCII art, here is something that will make your colleagues either deeply impressed or deeply concerned about your priorities.\n\ncat(\"\\014\")\n\n# ASCII art Star Wars inspired message\nmessage_art &lt;- \"\n __\n|  |\n|  |\n|  |\n|  |\n|__|\n\n     ___      .___  ___.\n    /   \\\\     |   \\\\/   |\n   /  ^  \\\\    |  \\\\  /  |\n  /  /_\\\\  \\\\   |  |\\\\/|  |\n /  _____  \\\\  |  |  |  |\n/__/     \\\\__\\\\ |__|  |__|\n\n____    ____  ______    __    __  .______\n\\\\   \\\\  /   / /  __  \\\\  |  |  |  | |   _  \\\\\n \\\\   \\\\/   / |  |  |  | |  |  |  | |  |_)  |\n  \\\\_    _/  |  |  |  | |  |  |  | |      /\n    |  |    |  `--'  | |  `--'  | |  |\\\\  \\\\----.\n    |__|     \\\\______/   \\\\______/  | _| `._____|\n\n.___________. _______     ___       ______  __    __   _______ .______\n|           ||   ____|   /   \\\\     /      ||  |  |  | |   ____||   _  \\\\\n`---|  |----`|  |__     /  ^  \\\\   |  ,----'|  |__|  | |  |__   |  |_)  |\n    |  |     |   __|   /  /_\\\\  \\\\  |  |     |   __   | |   __|  |      /\n    |  |     |  |____ /  _____  \\\\ |  `----.|  |  |  | |  |____ |  |\\\\  \\\\----.\n    |__|     |_______/__/     \\\\__\\\\ \\\\______||__|  |__| |_______|| _| `._____|\n\"\n\ncat(message_art)\nmessage(\"\\n\\n   Welcome to the dark side! \\n\\n\")\n\n\n\n\nI created this using ASCII Art Generator, which is an absolutely fantastic rabbit hole to fall down when you should be working."
  },
  {
    "objectID": "blog/2025-07-07/rprofile_customisation.html#the-information-station-building-your-personal-dashboard",
    "href": "blog/2025-07-07/rprofile_customisation.html#the-information-station-building-your-personal-dashboard",
    "title": "Beyond the Splash Screen: Customising Your RStudio Startup Experience",
    "section": "The Information Station: Building Your Personal Dashboard",
    "text": "The Information Station: Building Your Personal Dashboard\nLet us shift gears from artistic to informational. What if your startup screen could give you a quick overview of your current R environment? Think of it as your personal mission control – a heads-up display for your analytical adventures.\n\ncat(\"\\014\")\n\n# System information\nmessage(\"\")\nmessage(\"  🖥️ SYSTEM STATUS REPORT\")\nmessage(\"\")\nmessage(\"\")\nmessage(\"  📅 Date: \", Sys.Date())\nmessage(\"  ⏰ Time: \", format(Sys.time(), \"%H:%M:%S\"))\nmessage(\"\")\nmessage(\"╭────────────────────────────────────────────╮\")\nmessage(\"\")\nmessage(\"  🔧 R Version: \", R.version.string)\nmessage(\"  💻 Platform: \", R.version$platform)\nmessage(\"\")\nmessage(\"  ──────────────────────────────────────────\")\nmessage(\"\")\nmessage(\"  📁 Working Directory: \", basename(getwd()))\nmessage(\"  📦 Attached Packages: \", sum(grepl(\"^package:\", search())))\nmessage(\"\")\nmessage(\"╰────────────────────────────────────────────╯\")\nmessage(\"\")\nmessage(\"\")\nmessage(\"  Ready for data analysis! 🎯\")\n\n\n\n\nThis creates a neat little status report that tells you everything you need to know about your current R environment. The R.version.string gives you your R version, R.version$platform tells you what system you are running on, and basename(getwd()) shows just the name of your current working directory without the full path (because nobody needs to see /Users/YourName/Documents/Projects/That_Analysis_You_Started_Six_Months_Ago_But_Never_Finished).\nThe sum(grepl(\"^package:\", search())) is a neat little trick to count attached packages. The search() function lists all kinds of objects, including loaded packages. Therefore, we have to make sure we only count objects that relate to loaded packages. The grepl() function is an important one to remember if you work with character vectors frequently. It allows us to look for patterns in text, in our case this is package:. Learning how to use grepl() is certainly an essential skill everyone should tackle at some point in their R journey.\nHere is an example of the unfiltered search() output:\n\nsearch()\n\n[1] \".GlobalEnv\"        \"package:stats\"     \"package:graphics\" \n[4] \"package:grDevices\" \"package:utils\"     \"package:datasets\" \n[7] \"package:methods\"   \"Autoloads\"         \"package:base\""
  },
  {
    "objectID": "blog/2025-07-07/rprofile_customisation.html#the-technicolor-dream-adding-color-to-your-console",
    "href": "blog/2025-07-07/rprofile_customisation.html#the-technicolor-dream-adding-color-to-your-console",
    "title": "Beyond the Splash Screen: Customising Your RStudio Startup Experience",
    "section": "The Technicolor Dream: Adding Color to Your Console",
    "text": "The Technicolor Dream: Adding Color to Your Console\nOur status report is functional, but let us be honest, it is about as exciting as watching paint dry in grayscale. Time to add some color to our console world using the magnificent crayon package.\n\ncat(\"\\014\")\n\n# Check for required packages\nrequired &lt;- c(\"crayon\")\n\nfor (pkg in required) {\n  if (!requireNamespace(pkg, quietly = TRUE)) {\n    message(\"❗ Package '\", pkg, \"' is not installed. Please install it with install.packages(\\\"\", pkg, \"\\\")\")\n  }\n}\n\n# Load colors\nif (requireNamespace(\"crayon\", quietly = TRUE)) {\n  bold &lt;- crayon::bold\n  blue &lt;- crayon::blue\n  green &lt;- crayon::green\n  magenta &lt;- crayon::magenta\n  cyan &lt;- crayon::cyan\n  yellow &lt;- crayon::yellow\n} else {\n  bold &lt;- blue &lt;- green &lt;- magenta &lt;- cyan &lt;- yellow &lt;- identity\n}\n\nmessage(\"\")\nmessage(bold(blue(\"  🖥️ SYSTEM STATUS REPORT\")))\nmessage(\"\")\nmessage(\"\")\nmessage(yellow(\"  📅 Date: \"), Sys.Date())\nmessage(yellow(\"  ⏰ Time: \"), format(Sys.time(), \"%H:%M:%S\"))\nmessage(\"\")\nmessage(cyan(\"╭────────────────────────────────────────────╮\"))\nmessage(\"\")\nmessage(\"  🔧 R Version: \", green(R.version.string))\nmessage(\"  💻 Platform: \", green(R.version$platform))\nmessage(\"\")\nmessage(cyan(\"  ──────────────────────────────────────────\"))\nmessage(\"\")\nmessage(\"  📁 Working Directory: \", magenta(basename(getwd())))\nmessage(\"  📦 Attached Packages: \", magenta(sum(grepl(\"^package:\", search()))))\nmessage(\"\")\nmessage(cyan(\"╰────────────────────────────────────────────╯\"))\nmessage(\"\")\nmessage(\"\")\nmessage(bold(green(\"  Ready for data analysis! 🎯\")))\n\n\n\n\nNotice how we are being responsible developers here? We check for package availability using requireNamespace() with quietly = TRUE to avoid annoying error messages. The identity function is our safety net. It is like having a backup plan that just returns whatever you give it, effectively removing color formatting when crayon is not available.\nThis is the kind of defensive programming that separates the experienced programmers from novices. Your .Rprofile should enhance your experience, not break it when a package goes missing."
  },
  {
    "objectID": "blog/2025-07-07/rprofile_customisation.html#the-palette-master-creating-your-signature-style",
    "href": "blog/2025-07-07/rprofile_customisation.html#the-palette-master-creating-your-signature-style",
    "title": "Beyond the Splash Screen: Customising Your RStudio Startup Experience",
    "section": "The Palette Master: Creating Your Signature Style",
    "text": "The Palette Master: Creating Your Signature Style\nFor those who want complete control over their aesthetic destiny, let us create custom color schemes using RGB values. This is where you can really make your startup screen uniquely yours.\n\ncat(\"\\014\")\n\n# Check for required packages\nrequired &lt;- c(\"crayon\")\n\nfor (pkg in required) {\n  if (!requireNamespace(pkg, quietly = TRUE)) {\n    message(\"❗ Package '\", pkg, \"' is not installed. Please install it with install.packages(\\\"\", pkg, \"\\\")\")\n  }\n}\n\nif (requireNamespace(\"crayon\", quietly = TRUE)) {\n  # Create custom RGB styles (values between 0–255)\n  title_col     &lt;- crayon::make_style(rgb(55, 114, 156, maxColorValue = 255))\n  label_col     &lt;- crayon::make_style(rgb(55, 114, 156, maxColorValue = 255))\n  value_col     &lt;- crayon::make_style(rgb(233, 228, 222, maxColorValue = 255))\n  section_col   &lt;- crayon::make_style(rgb(165, 93, 53, maxColorValue = 255))\n  \n  bold &lt;- crayon::bold\n} else {\n  # Fallback to identity if crayon is unavailable\n  title_col &lt;- label_col &lt;- value_col &lt;- section_col &lt;- bold &lt;- identity\n}\n\nmessage(\"\")\nmessage(bold(title_col(\"  🖥️ SYSTEM STATUS REPORT\")))\nmessage(\"\")\nmessage(\"\")\nmessage(label_col(\"  📅 Date: \"), value_col(Sys.Date()))\nmessage(label_col(\"  ⏰ Time: \"), value_col(format(Sys.time(), \"%H:%M:%S\")))\nmessage(\"\")\nmessage(section_col(\"╭────────────────────────────────────────────╮\"))\nmessage(\"\")\nmessage(label_col(\"  🔧 R Version: \"), value_col(R.version.string))\nmessage(label_col(\"  💻 Platform: \"), value_col(R.version$platform))\nmessage(\"\")\nmessage(section_col(\"  ──────────────────────────────────────────\"))\nmessage(\"\")\nmessage(label_col(\"  📁 Working Directory: \"), value_col(basename(getwd())))\nmessage(label_col(\"  📦 Attached Packages: \"), value_col(sum(grepl(\"^package:\", search()))))\nmessage(\"\")\nmessage(section_col(\"╰────────────────────────────────────────────╯\"))\nmessage(\"\")\nmessage(\"\")\nmessage(bold(value_col(\"  Ready for data analysis! 🚀\")))\n\n\n\n\nThis approach gives you complete control over your color scheme. You can match your favorite color palette, align with your company’s branding, or just create something that makes you smile every morning. The make_style() function accepts RGB values, so you can be as precise as you want with your color choices.\nPro tip: Use an online color picker to find the perfect RGB values for your palette. There is something deeply satisfying about having a perfectly curated color scheme that is uniquely yours. Pinterest is usually where I get my colour palette inspirations from."
  },
  {
    "objectID": "blog/2025-07-07/rprofile_customisation.html#the-weather-station-the-power-of-apis",
    "href": "blog/2025-07-07/rprofile_customisation.html#the-weather-station-the-power-of-apis",
    "title": "Beyond the Splash Screen: Customising Your RStudio Startup Experience",
    "section": "The Weather Station: The power of APIs",
    "text": "The Weather Station: The power of APIs\nSo far, we have been working with static, local information. But what if we could break free from the confines of our computer and connect with the wider world? What if your startup screen could tell you whether you will need an umbrella for your lunch break or not?\nWelcome to the world of dynamic content. Here is how to turn your R startup into a personal weather station:\n\ncat(\"\\014\")\n\n# Attempt to fetch and display weather information\ntryCatch({\n  \n  # Check for required packages\n  required &lt;- c(\"httr\")\n  \n  for (pkg in required) {\n    if (!requireNamespace(pkg, quietly = TRUE)) {\n      message(\"❗ Package '\", pkg, \"' is not installed. Please install it with install.packages(\\\"\", pkg, \"\\\")\")\n    }\n  }\n  \n  # Fetch weather data from wttr.in API\n  # This format provides a compact weather summary\n  response &lt;- httr::GET(\n    'https://wttr.in/London?format=%l%0A%c%0A%t%20|%20Temperature%0A%f%20|%20Real%20Feel%0A%20%h%20%20|%20Humidity%0A',\n    httr::timeout(10))\n  \n  # Check if the API request was successful\n  if (httr::status_code(response) == 200) {\n    # Display the weather information\n    cat(httr::content(response, \"text\"))\n  } else {\n    # Log any HTTP errors\n    message(\"Weather service returned code: \", httr::status_code(response))\n  }\n  \n}, error = function(e) {\n  # Handle any errors gracefully without breaking RStudio startup\n  message(\"Weather fetch error: \", e$message)\n})\n\n\n\n\nThis code uses the fantastic wttr.in service, which provides weather data with a delightfully simple API. The service will automatically detect your location based on your IP address, or you can specify a city by changing “London” to your preferred location.\nThe GET() function from the httr packages makes the HTTP request, and we set a timeout to prevent your startup from hanging if the weather service is having a bad day. The tryCatch() wrapper is our safety net as it ensures that if something goes wrong with the weather fetch, your RStudio startup will not crash and burn.\nNotice how we are building in resilience here. The internet is a fickle beast, and APIs can fail. Good startup customisation code should degrade gracefully when things go wrong."
  },
  {
    "objectID": "blog/2025-07-07/rprofile_customisation.html#the-daily-sage-wisdom-at-your-fingertips",
    "href": "blog/2025-07-07/rprofile_customisation.html#the-daily-sage-wisdom-at-your-fingertips",
    "title": "Beyond the Splash Screen: Customising Your RStudio Startup Experience",
    "section": "The Daily Sage: Wisdom at Your Fingertips",
    "text": "The Daily Sage: Wisdom at Your Fingertips\nWeather is practical, but what about feeding your soul? Let us add some daily inspiration to your startup routine, because sometimes, the difference between a good day and a great day is a perfectly timed dose of wisdom.\n\n# Ensure required packages are available\nrequired &lt;- c(\"httr\", \"jsonlite\", \"glue\")\n\nfor (pkg in required) {\n  if (!requireNamespace(pkg, quietly = TRUE)) {\n    message(\"❗ Package '\", pkg, \"' is not installed. Please install it with install.packages(\\\"\", pkg, \"\\\")\")\n  }\n}\n\n# Fetch and display quote of the day\ntryCatch({\n  res &lt;- httr::GET(\"https://zenquotes.io/api/random\", httr::timeout(5))\n  \n  if (httr::status_code(res) == 200) {\n    raw_txt &lt;- httr::content(res, \"text\", encoding = \"UTF-8\")\n    \n    # Parse and extract quote\n    quote_data &lt;- jsonlite::fromJSON(raw_txt)\n    quote &lt;- quote_data$q\n    author &lt;- quote_data$a\n    \n    cat(glue::glue('\\n🧠 Quote of the Day:\\n\"{quote}\" — {author}\\n'))\n    \n  } else {\n    message(\"Quote service returned code: \", httr::status_code(res))\n  }\n}, error = function(e) {\n  message(\"Quote fetch error: \", e$message)\n})\n\n\n\n\nThis example introduces some new friends to our toolkit: - jsonlite: For parsing JSON responses with elegance - glue: String interpolation that actually makes sense (unlike paste())\nThe ZenQuotes API is a gem – it provides inspirational quotes without requiring API keys or complex authentication. The jsonlite::fromJSON() function parses the JSON response, and we extract the quote and author fields.\nNotice how we are building in backup wisdom for when the API fails? Having a plan B for when technology lets you down is never a bad idea."
  },
  {
    "objectID": "blog/2025-07-07/rprofile_customisation.html#the-perils-of-paradise-what-could-go-wrong",
    "href": "blog/2025-07-07/rprofile_customisation.html#the-perils-of-paradise-what-could-go-wrong",
    "title": "Beyond the Splash Screen: Customising Your RStudio Startup Experience",
    "section": "The Perils of Paradise: What Could Go Wrong?",
    "text": "The Perils of Paradise: What Could Go Wrong?\nBefore you go completely overboard with dynamic content (and trust me, the temptation is real), let us talk about the trade-offs. Every paradise has its serpents, and startup customisation is no exception.\nThe Network Dependency Dilemma: All those beautiful dynamic features only work when you are connected to the internet. Work from a coffee shop with spotty WiFi? You might stare at error messages instead of inspiring quotes. The solution? Always include fallback content for offline scenarios.\nThe Speed Trap: Fetching external data adds latency to your startup. While we are talking seconds, not minutes, some users prefer their R sessions to start faster than you can say “statistical significance”. Consider your personal patience levels when adding network-dependent features.\nThe API Reliability Roulette: Third-party services can go down, change their APIs, or start requiring authentication. Always wrap your API calls in error handling, and do not let a broken quote service break your entire R startup experience.\nThe Rate Limit Reality: Some APIs have rate limits. If you are the type who starts R sessions every five minutes while debugging, you might hit these limits. Choose your APIs wisely, and do not abuse the free tiers."
  },
  {
    "objectID": "blog/2025-07-07/rprofile_customisation.html#the-infinite-possibility-engine-where-dreams-become-code",
    "href": "blog/2025-07-07/rprofile_customisation.html#the-infinite-possibility-engine-where-dreams-become-code",
    "title": "Beyond the Splash Screen: Customising Your RStudio Startup Experience",
    "section": "The Infinite Possibility Engine: Where Dreams Become Code",
    "text": "The Infinite Possibility Engine: Where Dreams Become Code\nThe examples we have explored are just the tip of the iceberg. Your .Rprofile is a canvas limited only by your imagination and your tolerance for startup complexity. Here are some ideas to fuel your creativity:\nThe Project Detective: Write code that examines your current working directory and provides project-specific information. Working on a machine learning project? Get a reminder of your model’s latest performance. Analyzing survey data? See a quick summary of your response rates.\nThe Package Sentinel: Create a system that checks for outdated packages and gently reminds you to update them. No more surprises when that function you have been using for months suddenly breaks because of a breaking change in a dependency.\nThe Git Whisperer: If you are working with version control, display the current branch and repository status. Are you on main when you should be on develop? Your startup screen can save you from committing to the wrong branch.\nThe Calendar Oracle: Connect to your calendar API and display upcoming meetings or deadlines. Nothing says “professional data scientist” like having your startup screen remind you about that 2 pm stakeholder meeting.\nThe Motivation Engine: Create a rotating set of personal motivational messages tailored to your current challenges. Working on a particularly difficult analysis? Let your startup screen be your cheerleader.\nYou might also explore the cowsay package for ASCII animals that can deliver your messages (because everything is better when a cow says it), or investigate APIs that require authentication for more personalised data."
  },
  {
    "objectID": "blog/2025-07-07/rprofile_customisation.html#the-wisdom-of-experience-key-takeaways",
    "href": "blog/2025-07-07/rprofile_customisation.html#the-wisdom-of-experience-key-takeaways",
    "title": "Beyond the Splash Screen: Customising Your RStudio Startup Experience",
    "section": "The Wisdom of Experience: Key Takeaways",
    "text": "The Wisdom of Experience: Key Takeaways\nFrom our journey through the world of RStudio customisation, you should now possess:\n\nThe Foundation: Understanding how .Rprofile and setHook() work together to create startup magic\nThe Art of Progression: Building from simple console clearing to complex, dynamic content displays\nThe Defensive Mindset: Using tryCatch() and requireNamespace() to create robust code that enhances rather than breaks your workflow\nThe Dependency Dance: Managing package requirements and providing graceful fallbacks\nThe Network Navigator: Integrating external APIs while handling the unpredictable nature of the internet\nThe String Sculptor: Using glue for readable formatting and crayon for colorful output\nThe Balance Master: Understanding the trade-offs between functionality and simplicity, online features and offline reliability"
  },
  {
    "objectID": "blog/2025-07-07/rprofile_customisation.html#the-final-word-why-this-matters",
    "href": "blog/2025-07-07/rprofile_customisation.html#the-final-word-why-this-matters",
    "title": "Beyond the Splash Screen: Customising Your RStudio Startup Experience",
    "section": "The Final Word: Why This Matters",
    "text": "The Final Word: Why This Matters\nCustomising your .Rprofile will not make you a better data scientist. It will not improve your statistical modeling skills or make your visualisations more insightful. What it will do is make your daily R experience more personal, more delightful, and more uniquely yours.\nIn a world where we spend countless hours staring at screens, fighting with data, and debugging code, these small moments of joy matter. They are the difference between viewing your tools as cold, impersonal utilities and seeing them as extensions of your personality and creativity.\nThe key is finding the right balance for your workflow. Some days you will want the full ASCII art, weather report, and inspirational quote experience. On other days, you will appreciate the simple elegance of a cleared console and a friendly greeting.\nYour .Rprofile is yours to customise. Make it reflect who you are, what you care about, and what makes you smile. In the end, we are not just researchers, analysts and students, we are humans who happen to love working with data. And sometimes, a little personality in our tools can make all the difference."
  },
  {
    "objectID": "blog/2025-07-07/rprofile_customisation.html#sources-used-and-further-reading",
    "href": "blog/2025-07-07/rprofile_customisation.html#sources-used-and-further-reading",
    "title": "Beyond the Splash Screen: Customising Your RStudio Startup Experience",
    "section": "Sources used and further reading",
    "text": "Sources used and further reading\nR Packages Used:\n\ncrayon | Transform your console into a rainbow\nhttr | Your bridge to the web\njsonlite | JSON parsing that does not hurt your brain\nglue | String interpolation for civilized humans\ncowsay | Because ASCII animals make everything better\n\nAPIs and Services for Dynamic Content:\n\nwttr.in | Weather data without the API key hassle\nZenQuotes | Daily wisdom for your soul\nASCII Art Generator | Turn text into art\n\nEssential R Resources:\n\nR Startup Documentation - The official word on R startup\nR for Non-Programmers - Comprehensive R learning for everyone\n\nHappy customising, and may your R sessions be forever more delightful! 🎯✨"
  }
]